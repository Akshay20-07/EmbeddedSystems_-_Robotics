
tempsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000073  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000317  00000000  00000000  0000034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018c  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037e  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fa  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d9  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  8a:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define RS PC0
#define RW PC1
#define EN PC2
 
void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	24 ec       	ldi	r18, 0xC4	; 196
  d6:	39 e0       	ldi	r19, 0x09	; 9
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(unsigned int i)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	0e c0       	rjmp	.+28     	; 0x128 <Lcd_num+0x2a>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	ce 01       	movw	r24, r28
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 06 01 	call	0x20c	; 0x20c <__udivmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	ce 01       	movw	r24, r28
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 06 01 	call	0x20c	; 0x20c <__udivmodhi4>
 126:	eb 01       	movw	r28, r22

void Lcd_num(unsigned int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 128:	20 97       	sbiw	r28, 0x00	; 0
 12a:	81 f7       	brne	.-32     	; 0x10c <Lcd_num+0xe>
d=i%10;
Lcd_data(d+48);
i/=10;

}
Lcd_cmd(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_init>:

void Lcd_init()
{
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 150:	08 95       	ret

00000152 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	03 c0       	rjmp	.+6      	; 0x160 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	d1 f7       	brne	.-12     	; 0x15a <Lcd_str+0x8>
Lcd_data(*str++);
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <adc_init>:

void adc_init()
{
 16c:	3e 9a       	sbi	0x07, 6	; 7
ADMUX|=(1<<REFS0);
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 16e:	86 b1       	in	r24, 0x06	; 6
 170:	87 68       	ori	r24, 0x87	; 135
 172:	86 b9       	out	0x06, r24	; 6
}
 174:	08 95       	ret

00000176 <adc_read>:

unsigned int adc_read(unsigned char channel)
{
 176:	80 64       	ori	r24, 0x40	; 64
 178:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|channel;
ADCSRA|=(1<<ADSC);
 17a:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA &(1<<ADIF)));
 17c:	34 9b       	sbis	0x06, 4	; 6
 17e:	fe cf       	rjmp	.-4      	; 0x17c <adc_read+0x6>
ADCSRA|=(1<<ADIF);
 180:	34 9a       	sbi	0x06, 4	; 6
return (ADC);
 182:	24 b1       	in	r18, 0x04	; 4
 184:	35 b1       	in	r19, 0x05	; 5
}
 186:	c9 01       	movw	r24, r18
 188:	08 95       	ret

0000018a <main>:
void main()
{ 
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
unsigned int a; 
DDRA=0xFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	8a bb       	out	0x1a, r24	; 26
DDRC=0xFF;
 19c:	84 bb       	out	0x14, r24	; 20
Lcd_data(*str++);
}

void adc_init()
{
ADMUX|=(1<<REFS0);
 19e:	3e 9a       	sbi	0x07, 6	; 7
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 1a0:	86 b1       	in	r24, 0x06	; 6
 1a2:	87 68       	ori	r24, 0x87	; 135
 1a4:	86 b9       	out	0x06, r24	; 6
{ 
unsigned int a; 
DDRA=0xFF;
DDRC=0xFF;
adc_init();
Lcd_init();
 1a6:	0e 94 9c 00 	call	0x138	; 0x138 <Lcd_init>
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1aa:	70 e4       	ldi	r23, 0x40	; 64
 1ac:	d7 2e       	mov	r13, r23
 1ae:	68 ea       	ldi	r22, 0xA8	; 168
 1b0:	e6 2e       	mov	r14, r22
 1b2:	61 e6       	ldi	r22, 0x61	; 97
 1b4:	f6 2e       	mov	r15, r22
Lcd_str("ADC_value:    ");
Lcd_cmd(0x8F);
Lcd_num(a);
_delay_ms(100);

a=(a*500)/1024;
 1b6:	c4 ef       	ldi	r28, 0xF4	; 244
 1b8:	d1 e0       	ldi	r29, 0x01	; 1
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1ba:	d7 b8       	out	0x07, r13	; 7
ADCSRA|=(1<<ADSC);
 1bc:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA &(1<<ADIF)));
 1be:	34 9b       	sbis	0x06, 4	; 6
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0x34>
ADCSRA|=(1<<ADIF);
 1c2:	34 9a       	sbi	0x06, 4	; 6
return (ADC);
 1c4:	04 b1       	in	r16, 0x04	; 4
 1c6:	15 b1       	in	r17, 0x05	; 5
adc_init();
Lcd_init();
while(1)
{
a=adc_read(0);
Lcd_cmd(0x80);
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("ADC_value:    ");
 1ce:	80 e6       	ldi	r24, 0x60	; 96
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
Lcd_cmd(0x8F);
 1d6:	8f e8       	ldi	r24, 0x8F	; 143
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_num(a);
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 7f 00 	call	0xfe	; 0xfe <Lcd_num>
 1e2:	c7 01       	movw	r24, r14
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x5a>
_delay_ms(100);

a=(a*500)/1024;
 1e8:	c8 01       	movw	r24, r16
 1ea:	8c 9f       	mul	r24, r28
 1ec:	80 01       	movw	r16, r0
 1ee:	8d 9f       	mul	r24, r29
 1f0:	10 0d       	add	r17, r0
 1f2:	9c 9f       	mul	r25, r28
 1f4:	10 0d       	add	r17, r0
 1f6:	11 24       	eor	r1, r1
Lcd_cmd(0xC5);
 1f8:	85 ec       	ldi	r24, 0xC5	; 197
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_num(a);
 1fe:	81 2f       	mov	r24, r17
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 7f 00 	call	0xfe	; 0xfe <Lcd_num>
 20a:	d7 cf       	rjmp	.-82     	; 0x1ba <main+0x30>

0000020c <__udivmodhi4>:
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	51 e1       	ldi	r21, 0x11	; 17
 212:	07 c0       	rjmp	.+14     	; 0x222 <__udivmodhi4_ep>

00000214 <__udivmodhi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	a6 17       	cp	r26, r22
 21a:	b7 07       	cpc	r27, r23
 21c:	10 f0       	brcs	.+4      	; 0x222 <__udivmodhi4_ep>
 21e:	a6 1b       	sub	r26, r22
 220:	b7 0b       	sbc	r27, r23

00000222 <__udivmodhi4_ep>:
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	a9 f7       	brne	.-22     	; 0x214 <__udivmodhi4_loop>
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
