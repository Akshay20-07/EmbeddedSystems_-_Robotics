
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  000005a0  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000073  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000098f  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018d  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000831  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008e9  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002507  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3f       	cpi	r26, 0xF8	; 248
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  8a:	0c 94 ce 02 	jmp	0x59c	; 0x59c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <adc_init>:
#define RS PC0
#define RW PC1
#define EN PC2

void adc_init()
{
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	87 b9       	out	0x07, r24	; 7
ADMUX|=(1<<REFS1)|(1<<REFS0);
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 68       	ori	r24, 0x87	; 135
  9c:	86 b9       	out	0x06, r24	; 6
}
  9e:	08 95       	ret

000000a0 <adc_read>:

unsigned int adc_read(unsigned char channel)
{
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
channel&=0x01;
ADMUX|=channel;
ADCSRA|=(1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6

while(!(ADCSRA&(1<<ADIF)));
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <adc_read+0xa>
ADCSRA|=(1<<ADIF);
  ae:	34 9a       	sbi	0x06, 4	; 6

return(ADC);
  b0:	24 b1       	in	r18, 0x04	; 4
  b2:	35 b1       	in	r19, 0x05	; 5
}
  b4:	c9 01       	movw	r24, r18
  b6:	08 95       	ret

000000b8 <lcd_cmd>:

void lcd_cmd(unsigned char c)
{
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
  bc:	25 bb       	out	0x15, r18	; 21
lcd=(c & 0xF0);
lcd&=~(1<<RS);  //RS=0
  be:	a8 98       	cbi	0x15, 0	; 21
lcd&=~(1<<RW);  //RW=0
  c0:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);   //EN=1
  c2:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c4:	20 e4       	ldi	r18, 0x40	; 64
  c6:	3c e9       	ldi	r19, 0x9C	; 156
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_cmd+0x12>
_delay_ms(10);
lcd&=~(1<<EN);  //EN=0
  ce:	aa 98       	cbi	0x15, 2	; 21
lcd=((c<<4) & 0xF0);
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	44 e0       	ldi	r20, 0x04	; 4
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	4a 95       	dec	r20
  da:	e1 f7       	brne	.-8      	; 0xd4 <lcd_cmd+0x1c>
  dc:	85 bb       	out	0x15, r24	; 21
lcd&=~(1<<RS);
  de:	a8 98       	cbi	0x15, 0	; 21
lcd&=~(1<<RW);
  e0:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);
  e2:	aa 9a       	sbi	0x15, 2	; 21
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_cmd+0x2e>
_delay_ms(10);
lcd&=~(1<<EN);
  ea:	aa 98       	cbi	0x15, 2	; 21
}
  ec:	08 95       	ret

000000ee <lcd_data>:

void lcd_data(unsigned char c)
{
  ee:	28 2f       	mov	r18, r24
  f0:	20 7f       	andi	r18, 0xF0	; 240
  f2:	25 bb       	out	0x15, r18	; 21
lcd=(c & 0xF0);
lcd|=(1<<RS);   //RS=1
  f4:	a8 9a       	sbi	0x15, 0	; 21
lcd&=~(1<<RW);  //RW=0
  f6:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);   //EN=1
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	20 e4       	ldi	r18, 0x40	; 64
  fc:	3c e9       	ldi	r19, 0x9C	; 156
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0x12>
_delay_ms(10);
lcd&=~(1<<EN);  //EN=0
 104:	aa 98       	cbi	0x15, 2	; 21
lcd=((c<<4) & 0xF0);
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	54 e0       	ldi	r21, 0x04	; 4
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	5a 95       	dec	r21
 110:	e1 f7       	brne	.-8      	; 0x10a <lcd_data+0x1c>
 112:	85 bb       	out	0x15, r24	; 21
lcd|=(1<<RS);
 114:	a8 9a       	sbi	0x15, 0	; 21
lcd&=~(1<<RW);
 116:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);
 118:	aa 9a       	sbi	0x15, 2	; 21
 11a:	c9 01       	movw	r24, r18
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_data+0x2e>
_delay_ms(10);
lcd&=~(1<<EN);
 120:	aa 98       	cbi	0x15, 2	; 21
}
 122:	08 95       	ret

00000124 <lcd_init>:


void lcd_init()
{
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_cmd(0x02);
lcd_cmd(0x28);
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_cmd(0x06);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_cmd(0x0C);
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
}
 13c:	08 95       	ret

0000013e <lcd_num>:

void lcd_num(int i)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
int d=0;
lcd_cmd(0x04);  //decreament cursor
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
 14a:	0e c0       	rjmp	.+28     	; 0x168 <lcd_num+0x2a>
while(i!=0)
{
d=i%10;
lcd_data(d+48);   //adding ASCII vslue of 0
 14c:	ce 01       	movw	r24, r28
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 a7 02 	call	0x54e	; 0x54e <__divmodhi4>
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
i/=10;
 15c:	ce 01       	movw	r24, r28
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 a7 02 	call	0x54e	; 0x54e <__divmodhi4>
 166:	eb 01       	movw	r28, r22

void lcd_num(int i)
{
int d=0;
lcd_cmd(0x04);  //decreament cursor
while(i!=0)
 168:	20 97       	sbiw	r28, 0x00	; 0
 16a:	81 f7       	brne	.-32     	; 0x14c <lcd_num+0xe>
{
d=i%10;
lcd_data(d+48);   //adding ASCII vslue of 0
i/=10;
}
lcd_cmd(0x06);  //increament cursor
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_str>:

void lcd_str(unsigned char *str)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
 17e:	03 c0       	rjmp	.+6      	; 0x186 <lcd_str+0xe>
while(*str)
lcd_data(*str++);
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
lcd_cmd(0x06);  //increament cursor
}

void lcd_str(unsigned char *str)
{
while(*str)
 186:	88 81       	ld	r24, Y
 188:	88 23       	and	r24, r24
 18a:	d1 f7       	brne	.-12     	; 0x180 <lcd_str+0x8>
lcd_data(*str++);
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <main>:

void main()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
DDRC=0xff;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	84 bb       	out	0x14, r24	; 20
DDRA=0x00;
 19a:	1a ba       	out	0x1a, r1	; 26
lcd_init();
 19c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_init>
#define RW PC1
#define EN PC2

void adc_init()
{
ADMUX|=(1<<REFS1)|(1<<REFS0);
 1a0:	87 b1       	in	r24, 0x07	; 7
 1a2:	80 6c       	ori	r24, 0xC0	; 192
 1a4:	87 b9       	out	0x07, r24	; 7
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 1a6:	86 b1       	in	r24, 0x06	; 6
 1a8:	87 68       	ori	r24, 0x87	; 135
 1aa:	86 b9       	out	0x06, r24	; 6
 1ac:	c0 e9       	ldi	r28, 0x90	; 144
 1ae:	d1 e0       	ldi	r29, 0x01	; 1
adc_init();
int d;
int v;
while(1)
{
lcd_cmd(0x80);
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("distance = ");
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 1be:	88 ee       	ldi	r24, 0xE8	; 232
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	fe 01       	movw	r30, r28
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x30>
}

unsigned int adc_read(unsigned char channel)
{
channel&=0x01;
ADMUX|=channel;
 1cc:	38 9a       	sbi	0x07, 0	; 7
ADCSRA|=(1<<ADSC);
 1ce:	36 9a       	sbi	0x06, 6	; 6

while(!(ADCSRA&(1<<ADIF)));
 1d0:	34 9b       	sbis	0x06, 4	; 6
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <main+0x3e>
ADCSRA|=(1<<ADIF);
 1d4:	34 9a       	sbi	0x06, 4	; 6

return(ADC);
 1d6:	24 b1       	in	r18, 0x04	; 4
 1d8:	35 b1       	in	r19, 0x05	; 5
lcd_str("distance = ");
_delay_ms(100);

v=adc_read(1);

if(v>60 && v<65)
 1da:	c9 01       	movw	r24, r18
 1dc:	cd 97       	sbiw	r24, 0x3d	; 61
 1de:	04 97       	sbiw	r24, 0x04	; 4
 1e0:	78 f4       	brcc	.+30     	; 0x200 <main+0x6e>
{lcd_cmd(0xc6);
 1e2:	86 ec       	ldi	r24, 0xC6	; 198
 1e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("20 cm");
 1e8:	8c e6       	ldi	r24, 0x6C	; 108
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 1f0:	88 ee       	ldi	r24, 0xE8	; 232
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	fe 01       	movw	r30, r28
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <main+0x62>
 1fe:	d8 cf       	rjmp	.-80     	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>65 && v<70)
 200:	c9 01       	movw	r24, r18
 202:	82 54       	subi	r24, 0x42	; 66
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	04 97       	sbiw	r24, 0x04	; 4
 208:	78 f4       	brcc	.+30     	; 0x228 <main+0x96>
{lcd_cmd(0xc6);
 20a:	86 ec       	ldi	r24, 0xC6	; 198
 20c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("19 cm");
 210:	82 e7       	ldi	r24, 0x72	; 114
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 218:	88 ee       	ldi	r24, 0xE8	; 232
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	fe 01       	movw	r30, r28
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	d9 f7       	brne	.-10     	; 0x21c <main+0x8a>
 226:	c4 cf       	rjmp	.-120    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>70 && v<75)
 228:	c9 01       	movw	r24, r18
 22a:	87 54       	subi	r24, 0x47	; 71
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	04 97       	sbiw	r24, 0x04	; 4
 230:	78 f4       	brcc	.+30     	; 0x250 <main+0xbe>
{lcd_cmd(0xc6);
 232:	86 ec       	ldi	r24, 0xC6	; 198
 234:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("18 cm");
 238:	88 e7       	ldi	r24, 0x78	; 120
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 240:	88 ee       	ldi	r24, 0xE8	; 232
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	fe 01       	movw	r30, r28
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24c:	d9 f7       	brne	.-10     	; 0x244 <main+0xb2>
 24e:	b0 cf       	rjmp	.-160    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>75 && v<80)
 250:	c9 01       	movw	r24, r18
 252:	8c 54       	subi	r24, 0x4C	; 76
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	04 97       	sbiw	r24, 0x04	; 4
 258:	78 f4       	brcc	.+30     	; 0x278 <main+0xe6>
{lcd_cmd(0xc6);
 25a:	86 ec       	ldi	r24, 0xC6	; 198
 25c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("17 cm");
 260:	8e e7       	ldi	r24, 0x7E	; 126
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 268:	88 ee       	ldi	r24, 0xE8	; 232
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	fe 01       	movw	r30, r28
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0xda>
 276:	9c cf       	rjmp	.-200    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>80 && v<85)
 278:	c9 01       	movw	r24, r18
 27a:	81 55       	subi	r24, 0x51	; 81
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	04 97       	sbiw	r24, 0x04	; 4
 280:	78 f4       	brcc	.+30     	; 0x2a0 <main+0x10e>
{lcd_cmd(0xc6);
 282:	86 ec       	ldi	r24, 0xC6	; 198
 284:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("16 cm");
 288:	84 e8       	ldi	r24, 0x84	; 132
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 290:	88 ee       	ldi	r24, 0xE8	; 232
 292:	93 e0       	ldi	r25, 0x03	; 3
 294:	fe 01       	movw	r30, r28
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x104>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	d9 f7       	brne	.-10     	; 0x294 <main+0x102>
 29e:	88 cf       	rjmp	.-240    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>85 && v<92)
 2a0:	c9 01       	movw	r24, r18
 2a2:	86 55       	subi	r24, 0x56	; 86
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	06 97       	sbiw	r24, 0x06	; 6
 2a8:	78 f4       	brcc	.+30     	; 0x2c8 <main+0x136>
{lcd_cmd(0xc6);
 2aa:	86 ec       	ldi	r24, 0xC6	; 198
 2ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("15 cm");
 2b0:	8a e8       	ldi	r24, 0x8A	; 138
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 2b8:	88 ee       	ldi	r24, 0xE8	; 232
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	fe 01       	movw	r30, r28
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0x12a>
 2c6:	74 cf       	rjmp	.-280    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>92 && v<96)
 2c8:	c9 01       	movw	r24, r18
 2ca:	8d 55       	subi	r24, 0x5D	; 93
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	03 97       	sbiw	r24, 0x03	; 3
 2d0:	78 f4       	brcc	.+30     	; 0x2f0 <main+0x15e>
{lcd_cmd(0xc6);
 2d2:	86 ec       	ldi	r24, 0xC6	; 198
 2d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("14 cm");
 2d8:	80 e9       	ldi	r24, 0x90	; 144
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 2e0:	88 ee       	ldi	r24, 0xE8	; 232
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	fe 01       	movw	r30, r28
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x154>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	d9 f7       	brne	.-10     	; 0x2e4 <main+0x152>
 2ee:	60 cf       	rjmp	.-320    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>96 && v<99)
 2f0:	c9 01       	movw	r24, r18
 2f2:	81 56       	subi	r24, 0x61	; 97
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	02 97       	sbiw	r24, 0x02	; 2
 2f8:	78 f4       	brcc	.+30     	; 0x318 <main+0x186>
{lcd_cmd(0xc6);
 2fa:	86 ec       	ldi	r24, 0xC6	; 198
 2fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("13 cm");
 300:	86 e9       	ldi	r24, 0x96	; 150
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 308:	88 ee       	ldi	r24, 0xE8	; 232
 30a:	93 e0       	ldi	r25, 0x03	; 3
 30c:	fe 01       	movw	r30, r28
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x17c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	d9 f7       	brne	.-10     	; 0x30c <main+0x17a>
 316:	4c cf       	rjmp	.-360    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>99 && v<113)
 318:	c9 01       	movw	r24, r18
 31a:	84 56       	subi	r24, 0x64	; 100
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	0d 97       	sbiw	r24, 0x0d	; 13
 320:	78 f4       	brcc	.+30     	; 0x340 <main+0x1ae>
{lcd_cmd(0xc6);
 322:	86 ec       	ldi	r24, 0xC6	; 198
 324:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("12 cm");
 328:	8c e9       	ldi	r24, 0x9C	; 156
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 330:	88 ee       	ldi	r24, 0xE8	; 232
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	fe 01       	movw	r30, r28
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	d9 f7       	brne	.-10     	; 0x334 <main+0x1a2>
 33e:	38 cf       	rjmp	.-400    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>113 && v<120)
 340:	c9 01       	movw	r24, r18
 342:	82 57       	subi	r24, 0x72	; 114
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	06 97       	sbiw	r24, 0x06	; 6
 348:	78 f4       	brcc	.+30     	; 0x368 <main+0x1d6>
{lcd_cmd(0xc6);
 34a:	86 ec       	ldi	r24, 0xC6	; 198
 34c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("11 cm");
 350:	82 ea       	ldi	r24, 0xA2	; 162
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 358:	88 ee       	ldi	r24, 0xE8	; 232
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	fe 01       	movw	r30, r28
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 364:	d9 f7       	brne	.-10     	; 0x35c <main+0x1ca>
 366:	24 cf       	rjmp	.-440    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>120 && v<152)
 368:	c9 01       	movw	r24, r18
 36a:	89 57       	subi	r24, 0x79	; 121
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	4f 97       	sbiw	r24, 0x1f	; 31
 370:	78 f4       	brcc	.+30     	; 0x390 <main+0x1fe>
{lcd_cmd(0xc6);
 372:	86 ec       	ldi	r24, 0xC6	; 198
 374:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("10 cm");
 378:	88 ea       	ldi	r24, 0xA8	; 168
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 380:	88 ee       	ldi	r24, 0xE8	; 232
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	fe 01       	movw	r30, r28
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x1f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38c:	d9 f7       	brne	.-10     	; 0x384 <main+0x1f2>
 38e:	10 cf       	rjmp	.-480    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>152 && v<184)
 390:	c9 01       	movw	r24, r18
 392:	89 59       	subi	r24, 0x99	; 153
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	4f 97       	sbiw	r24, 0x1f	; 31
 398:	78 f4       	brcc	.+30     	; 0x3b8 <main+0x226>
{lcd_cmd(0xc6);
 39a:	86 ec       	ldi	r24, 0xC6	; 198
 39c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("09 cm");
 3a0:	8e ea       	ldi	r24, 0xAE	; 174
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 3a8:	88 ee       	ldi	r24, 0xE8	; 232
 3aa:	93 e0       	ldi	r25, 0x03	; 3
 3ac:	fe 01       	movw	r30, r28
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x21c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b4:	d9 f7       	brne	.-10     	; 0x3ac <main+0x21a>
 3b6:	fc ce       	rjmp	.-520    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>184 && v<216)
 3b8:	c9 01       	movw	r24, r18
 3ba:	89 5b       	subi	r24, 0xB9	; 185
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	4f 97       	sbiw	r24, 0x1f	; 31
 3c0:	78 f4       	brcc	.+30     	; 0x3e0 <main+0x24e>
{lcd_cmd(0xc6);
 3c2:	86 ec       	ldi	r24, 0xC6	; 198
 3c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("08 cm");
 3c8:	84 eb       	ldi	r24, 0xB4	; 180
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 3d0:	88 ee       	ldi	r24, 0xE8	; 232
 3d2:	93 e0       	ldi	r25, 0x03	; 3
 3d4:	fe 01       	movw	r30, r28
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	d9 f7       	brne	.-10     	; 0x3d4 <main+0x242>
 3de:	e8 ce       	rjmp	.-560    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>216 && v<248)
 3e0:	c9 01       	movw	r24, r18
 3e2:	89 5d       	subi	r24, 0xD9	; 217
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	4f 97       	sbiw	r24, 0x1f	; 31
 3e8:	78 f4       	brcc	.+30     	; 0x408 <main+0x276>
{lcd_cmd(0xc6);
 3ea:	86 ec       	ldi	r24, 0xC6	; 198
 3ec:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("07 cm");
 3f0:	8a eb       	ldi	r24, 0xBA	; 186
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 3f8:	88 ee       	ldi	r24, 0xE8	; 232
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	fe 01       	movw	r30, r28
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x26c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 404:	d9 f7       	brne	.-10     	; 0x3fc <main+0x26a>
 406:	d4 ce       	rjmp	.-600    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>248 && v<280)
 408:	c9 01       	movw	r24, r18
 40a:	89 5f       	subi	r24, 0xF9	; 249
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	4f 97       	sbiw	r24, 0x1f	; 31
 410:	78 f4       	brcc	.+30     	; 0x430 <main+0x29e>
{lcd_cmd(0xc6);
 412:	86 ec       	ldi	r24, 0xC6	; 198
 414:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("06 cm");
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 420:	88 ee       	ldi	r24, 0xE8	; 232
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	fe 01       	movw	r30, r28
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <main+0x294>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42c:	d9 f7       	brne	.-10     	; 0x424 <main+0x292>
 42e:	c0 ce       	rjmp	.-640    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>280 && v<418)
 430:	c9 01       	movw	r24, r18
 432:	89 51       	subi	r24, 0x19	; 25
 434:	91 40       	sbci	r25, 0x01	; 1
 436:	89 38       	cpi	r24, 0x89	; 137
 438:	91 05       	cpc	r25, r1
 43a:	78 f4       	brcc	.+30     	; 0x45a <main+0x2c8>
{lcd_cmd(0xc6);
 43c:	86 ec       	ldi	r24, 0xC6	; 198
 43e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("05 cm");
 442:	86 ec       	ldi	r24, 0xC6	; 198
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 44a:	88 ee       	ldi	r24, 0xE8	; 232
 44c:	93 e0       	ldi	r25, 0x03	; 3
 44e:	fe 01       	movw	r30, r28
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x2be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 454:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 456:	d9 f7       	brne	.-10     	; 0x44e <main+0x2bc>
 458:	ab ce       	rjmp	.-682    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>418 && v<556)
 45a:	c9 01       	movw	r24, r18
 45c:	83 5a       	subi	r24, 0xA3	; 163
 45e:	91 40       	sbci	r25, 0x01	; 1
 460:	89 38       	cpi	r24, 0x89	; 137
 462:	91 05       	cpc	r25, r1
 464:	78 f4       	brcc	.+30     	; 0x484 <__stack+0x25>
{lcd_cmd(0xc6);
 466:	86 ec       	ldi	r24, 0xC6	; 198
 468:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("04 cm");
 46c:	8c ec       	ldi	r24, 0xCC	; 204
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 474:	88 ee       	ldi	r24, 0xE8	; 232
 476:	93 e0       	ldi	r25, 0x03	; 3
 478:	fe 01       	movw	r30, r28
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d9 f7       	brne	.-10     	; 0x478 <__stack+0x19>
 482:	96 ce       	rjmp	.-724    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>556 && v<694)
 484:	c9 01       	movw	r24, r18
 486:	8d 52       	subi	r24, 0x2D	; 45
 488:	92 40       	sbci	r25, 0x02	; 2
 48a:	89 38       	cpi	r24, 0x89	; 137
 48c:	91 05       	cpc	r25, r1
 48e:	78 f4       	brcc	.+30     	; 0x4ae <__stack+0x4f>
{lcd_cmd(0xc6);
 490:	86 ec       	ldi	r24, 0xC6	; 198
 492:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("03 cm");
 496:	82 ed       	ldi	r24, 0xD2	; 210
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 49e:	88 ee       	ldi	r24, 0xE8	; 232
 4a0:	93 e0       	ldi	r25, 0x03	; 3
 4a2:	fe 01       	movw	r30, r28
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4aa:	d9 f7       	brne	.-10     	; 0x4a2 <__stack+0x43>
 4ac:	81 ce       	rjmp	.-766    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>694 && v<832)
 4ae:	c9 01       	movw	r24, r18
 4b0:	87 5b       	subi	r24, 0xB7	; 183
 4b2:	92 40       	sbci	r25, 0x02	; 2
 4b4:	89 38       	cpi	r24, 0x89	; 137
 4b6:	91 05       	cpc	r25, r1
 4b8:	78 f4       	brcc	.+30     	; 0x4d8 <__stack+0x79>
{lcd_cmd(0xc6);
 4ba:	86 ec       	ldi	r24, 0xC6	; 198
 4bc:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("02 cm");
 4c0:	88 ed       	ldi	r24, 0xD8	; 216
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 4c8:	88 ee       	ldi	r24, 0xE8	; 232
 4ca:	93 e0       	ldi	r25, 0x03	; 3
 4cc:	fe 01       	movw	r30, r28
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__stack+0x6f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <__stack+0x6d>
 4d6:	6c ce       	rjmp	.-808    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>832 && v<950)
 4d8:	c9 01       	movw	r24, r18
 4da:	81 54       	subi	r24, 0x41	; 65
 4dc:	93 40       	sbci	r25, 0x03	; 3
 4de:	85 37       	cpi	r24, 0x75	; 117
 4e0:	91 05       	cpc	r25, r1
 4e2:	78 f4       	brcc	.+30     	; 0x502 <__stack+0xa3>
{lcd_cmd(0xc6);
 4e4:	86 ec       	ldi	r24, 0xC6	; 198
 4e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("01 cm");
 4ea:	8e ed       	ldi	r24, 0xDE	; 222
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 4f2:	88 ee       	ldi	r24, 0xE8	; 232
 4f4:	93 e0       	ldi	r25, 0x03	; 3
 4f6:	fe 01       	movw	r30, r28
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__stack+0x99>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4fe:	d9 f7       	brne	.-10     	; 0x4f6 <__stack+0x97>
 500:	57 ce       	rjmp	.-850    	; 0x1b0 <main+0x1e>
_delay_ms(100);}
else if(v>950 && v<970)
 502:	27 5b       	subi	r18, 0xB7	; 183
 504:	33 40       	sbci	r19, 0x03	; 3
 506:	23 31       	cpi	r18, 0x13	; 19
 508:	31 05       	cpc	r19, r1
 50a:	78 f4       	brcc	.+30     	; 0x52a <__stack+0xcb>
{lcd_cmd(0xc6);
 50c:	86 ec       	ldi	r24, 0xC6	; 198
 50e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("00 cm");
 512:	84 ee       	ldi	r24, 0xE4	; 228
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 51a:	88 ee       	ldi	r24, 0xE8	; 232
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	fe 01       	movw	r30, r28
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <__stack+0xc1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 524:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 526:	d9 f7       	brne	.-10     	; 0x51e <__stack+0xbf>
 528:	43 ce       	rjmp	.-890    	; 0x1b0 <main+0x1e>
_delay_ms(100);}

else
{lcd_cmd(0xc0);
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
lcd_str("out of range");
 530:	8a ee       	ldi	r24, 0xEA	; 234
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_str>
 538:	88 ee       	ldi	r24, 0xE8	; 232
 53a:	93 e0       	ldi	r25, 0x03	; 3
 53c:	fe 01       	movw	r30, r28
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <__stack+0xdf>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 542:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 544:	d9 f7       	brne	.-10     	; 0x53c <__stack+0xdd>
_delay_ms(100);
lcd_cmd(0x01);}
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_cmd>
 54c:	31 ce       	rjmp	.-926    	; 0x1b0 <main+0x1e>

0000054e <__divmodhi4>:
 54e:	97 fb       	bst	r25, 7
 550:	09 2e       	mov	r0, r25
 552:	07 26       	eor	r0, r23
 554:	0a d0       	rcall	.+20     	; 0x56a <__divmodhi4_neg1>
 556:	77 fd       	sbrc	r23, 7
 558:	04 d0       	rcall	.+8      	; 0x562 <__divmodhi4_neg2>
 55a:	0c d0       	rcall	.+24     	; 0x574 <__udivmodhi4>
 55c:	06 d0       	rcall	.+12     	; 0x56a <__divmodhi4_neg1>
 55e:	00 20       	and	r0, r0
 560:	1a f4       	brpl	.+6      	; 0x568 <__divmodhi4_exit>

00000562 <__divmodhi4_neg2>:
 562:	70 95       	com	r23
 564:	61 95       	neg	r22
 566:	7f 4f       	sbci	r23, 0xFF	; 255

00000568 <__divmodhi4_exit>:
 568:	08 95       	ret

0000056a <__divmodhi4_neg1>:
 56a:	f6 f7       	brtc	.-4      	; 0x568 <__divmodhi4_exit>
 56c:	90 95       	com	r25
 56e:	81 95       	neg	r24
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	08 95       	ret

00000574 <__udivmodhi4>:
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	51 e1       	ldi	r21, 0x11	; 17
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__udivmodhi4_ep>

0000057c <__udivmodhi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	a6 17       	cp	r26, r22
 582:	b7 07       	cpc	r27, r23
 584:	10 f0       	brcs	.+4      	; 0x58a <__udivmodhi4_ep>
 586:	a6 1b       	sub	r26, r22
 588:	b7 0b       	sbc	r27, r23

0000058a <__udivmodhi4_ep>:
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	5a 95       	dec	r21
 590:	a9 f7       	brne	.-22     	; 0x57c <__udivmodhi4_loop>
 592:	80 95       	com	r24
 594:	90 95       	com	r25
 596:	bc 01       	movw	r22, r24
 598:	cd 01       	movw	r24, r26
 59a:	08 95       	ret

0000059c <_exit>:
 59c:	f8 94       	cli

0000059e <__stop_program>:
 59e:	ff cf       	rjmp	.-2      	; 0x59e <__stop_program>
