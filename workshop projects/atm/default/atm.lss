
atm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000003ba  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800084  000003de  00000452  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007b  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003fc  00000000  00000000  000004ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001aa  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ca  00000000  00000000  00000a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d7  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022e  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  8a:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define EN PC2
#define del 0x7F
unsigned char count=1,loc,inc=0;

void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	24 ec       	ldi	r18, 0xC4	; 196
  d6:	39 e0       	ldi	r19, 0x09	; 9
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(int i)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	8c 01       	movw	r16, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	1f c0       	rjmp	.+62     	; 0x14a <Lcd_num+0x4c>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	c8 01       	movw	r24, r16
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 b4 01 	call	0x368	; 0x368 <__divmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	c8 01       	movw	r24, r16
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 b4 01 	call	0x368	; 0x368 <__divmodhi4>
 126:	16 2f       	mov	r17, r22
 128:	07 2f       	mov	r16, r23
d=i%10;
Lcd_data(d+48);
 12a:	86 2f       	mov	r24, r22
 12c:	97 2f       	mov	r25, r23
 12e:	6a e0       	ldi	r22, 0x0A	; 10
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 b4 01 	call	0x368	; 0x368 <__divmodhi4>
 136:	80 5d       	subi	r24, 0xD0	; 208
 138:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 13c:	81 2f       	mov	r24, r17
 13e:	90 2f       	mov	r25, r16
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 b4 01 	call	0x368	; 0x368 <__divmodhi4>
 148:	8b 01       	movw	r16, r22

void Lcd_num(int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 14a:	01 15       	cp	r16, r1
 14c:	11 05       	cpc	r17, r1
 14e:	f1 f6       	brne	.-68     	; 0x10c <Lcd_num+0xe>
i/=10;
d=i%10;
Lcd_data(d+48);
i/=10;
}
Lcd_cmd(0x06);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <Lcd_init>:

void Lcd_init()
{
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 162:	88 e2       	ldi	r24, 0x28	; 40
 164:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 174:	08 95       	ret

00000176 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	03 c0       	rjmp	.+6      	; 0x184 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 184:	88 81       	ld	r24, Y
 186:	88 23       	and	r24, r24
 188:	d1 f7       	brne	.-12     	; 0x17e <Lcd_str+0x8>
Lcd_data(*str++);
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <key>:



unsigned char key()
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
unsigned char a;

while(1)
{
PORTD=0x0E;
 19c:	7e e0       	ldi	r23, 0x0E	; 14
 19e:	e7 2e       	mov	r14, r23
 1a0:	c2 ee       	ldi	r28, 0xE2	; 226
 1a2:	d4 e0       	ldi	r29, 0x04	; 4

  Lcd_cmd(0x01);
 
} 

PORTD=0x0D;
 1a4:	6d e0       	ldi	r22, 0x0D	; 13
 1a6:	f6 2e       	mov	r15, r22
{
 while(!(PINA&0x08));
 return '0';
} 

PORTD=0x0B;
 1a8:	0b e0       	ldi	r16, 0x0B	; 11
{
 while(!(PINA&0x08));
return '=';
} 

PORTD=0x07;
 1aa:	17 e0       	ldi	r17, 0x07	; 7
{
unsigned char a;

while(1)
{
PORTD=0x0E;
 1ac:	e2 ba       	out	0x12, r14	; 18
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <key+0x20>
_delay_ms(5);
if((PINA&0x01)==0)
 1b4:	c8 99       	sbic	0x19, 0	; 25
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <key+0x30>
{
while(!(PINA&0x01));
 1b8:	c8 9b       	sbis	0x19, 0	; 25
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <key+0x28>
 1bc:	87 e3       	ldi	r24, 0x37	; 55
 1be:	66 c0       	rjmp	.+204    	; 0x28c <key+0xfc>
 return '7';
}
if((PINA&0x02)==0)
 1c0:	c9 99       	sbic	0x19, 1	; 25
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <key+0x3c>
{
while(!(PINA&0x02));
 1c4:	c9 9b       	sbis	0x19, 1	; 25
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <key+0x34>
 1c8:	84 e3       	ldi	r24, 0x34	; 52
 1ca:	60 c0       	rjmp	.+192    	; 0x28c <key+0xfc>
 
 return '4';
}
 if((PINA&0x04)==0)
 1cc:	ca 99       	sbic	0x19, 2	; 25
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <key+0x48>
{
 while(!(PINA&0x04));
 1d0:	ca 9b       	sbis	0x19, 2	; 25
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <key+0x40>
 1d4:	81 e3       	ldi	r24, 0x31	; 49
 1d6:	5a c0       	rjmp	.+180    	; 0x28c <key+0xfc>
 return '1';
}
 if((PINA&0x08)==0)
 1d8:	cb 99       	sbic	0x19, 3	; 25
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <key+0x56>
{
 while(!(PINA&0x08));
 1dc:	cb 9b       	sbis	0x19, 3	; 25
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <key+0x4c>

  Lcd_cmd(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 
} 

PORTD=0x0D;
 1e6:	f2 ba       	out	0x12, r15	; 18
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <key+0x5a>
_delay_ms(5);
if((PINA&0x01)==0)
 1ee:	c8 99       	sbic	0x19, 0	; 25
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <key+0x6a>
{
while(!(PINA&0x01));
 1f2:	c8 9b       	sbis	0x19, 0	; 25
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <key+0x62>
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	49 c0       	rjmp	.+146    	; 0x28c <key+0xfc>
return'8';
}
if((PINA&0x02)==0)
 1fa:	c9 99       	sbic	0x19, 1	; 25
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <key+0x76>
{
while(!(PINA&0x02));
 1fe:	c9 9b       	sbis	0x19, 1	; 25
 200:	fe cf       	rjmp	.-4      	; 0x1fe <key+0x6e>
 202:	85 e3       	ldi	r24, 0x35	; 53
 204:	43 c0       	rjmp	.+134    	; 0x28c <key+0xfc>
return '5';
}
 if((PINA&0x04)==0)
 206:	ca 99       	sbic	0x19, 2	; 25
 208:	04 c0       	rjmp	.+8      	; 0x212 <key+0x82>
{
 while(!(PINA&0x04));
 20a:	ca 9b       	sbis	0x19, 2	; 25
 20c:	fe cf       	rjmp	.-4      	; 0x20a <key+0x7a>
 20e:	82 e3       	ldi	r24, 0x32	; 50
 210:	3d c0       	rjmp	.+122    	; 0x28c <key+0xfc>
 return '2';
}
 if((PINA&0x08)==0)
 212:	cb 99       	sbic	0x19, 3	; 25
 214:	04 c0       	rjmp	.+8      	; 0x21e <key+0x8e>
{
 while(!(PINA&0x08));
 216:	cb 9b       	sbis	0x19, 3	; 25
 218:	fe cf       	rjmp	.-4      	; 0x216 <key+0x86>
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	37 c0       	rjmp	.+110    	; 0x28c <key+0xfc>
 return '0';
} 

PORTD=0x0B;
 21e:	02 bb       	out	0x12, r16	; 18
 220:	ce 01       	movw	r24, r28
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <key+0x92>
_delay_ms(5);
if((PINA&0x01)==0)
 226:	c8 99       	sbic	0x19, 0	; 25
 228:	04 c0       	rjmp	.+8      	; 0x232 <key+0xa2>
{
while(!(PINA&0x01));
 22a:	c8 9b       	sbis	0x19, 0	; 25
 22c:	fe cf       	rjmp	.-4      	; 0x22a <key+0x9a>
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	2d c0       	rjmp	.+90     	; 0x28c <key+0xfc>
return '9';
}
if((PINA&0x02)==0)
 232:	c9 99       	sbic	0x19, 1	; 25
 234:	04 c0       	rjmp	.+8      	; 0x23e <key+0xae>
{
while(!(PINA&0x02));
 236:	c9 9b       	sbis	0x19, 1	; 25
 238:	fe cf       	rjmp	.-4      	; 0x236 <key+0xa6>
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	27 c0       	rjmp	.+78     	; 0x28c <key+0xfc>
return '6';
}
 if((PINA&0x04)==0)
 23e:	ca 99       	sbic	0x19, 2	; 25
 240:	04 c0       	rjmp	.+8      	; 0x24a <key+0xba>
{
 while(!(PINA&0x04));
 242:	ca 9b       	sbis	0x19, 2	; 25
 244:	fe cf       	rjmp	.-4      	; 0x242 <key+0xb2>
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	21 c0       	rjmp	.+66     	; 0x28c <key+0xfc>
 return '3';
}
 if((PINA&0x08)==0)
 24a:	cb 99       	sbic	0x19, 3	; 25
 24c:	04 c0       	rjmp	.+8      	; 0x256 <key+0xc6>
{
 while(!(PINA&0x08));
 24e:	cb 9b       	sbis	0x19, 3	; 25
 250:	fe cf       	rjmp	.-4      	; 0x24e <key+0xbe>
 252:	8d e3       	ldi	r24, 0x3D	; 61
 254:	1b c0       	rjmp	.+54     	; 0x28c <key+0xfc>
return '=';
} 

PORTD=0x07;
 256:	12 bb       	out	0x12, r17	; 18
 258:	ce 01       	movw	r24, r28
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <key+0xca>
_delay_ms(5);
if((PINA&0x01)==0)
 25e:	c8 99       	sbic	0x19, 0	; 25
 260:	04 c0       	rjmp	.+8      	; 0x26a <key+0xda>
{

while(!(PINA&0x01));
 262:	c8 9b       	sbis	0x19, 0	; 25
 264:	fe cf       	rjmp	.-4      	; 0x262 <key+0xd2>
 266:	8f e2       	ldi	r24, 0x2F	; 47
 268:	11 c0       	rjmp	.+34     	; 0x28c <key+0xfc>

return '/';
 
}
if((PINA&0x02)==0)
 26a:	c9 99       	sbic	0x19, 1	; 25
 26c:	04 c0       	rjmp	.+8      	; 0x276 <key+0xe6>
{
while(!(PINA&0x02))
 26e:	c9 99       	sbic	0x19, 1	; 25
 270:	02 c0       	rjmp	.+4      	; 0x276 <key+0xe6>
 272:	8a e2       	ldi	r24, 0x2A	; 42
 274:	0b c0       	rjmp	.+22     	; 0x28c <key+0xfc>
 
  return '*';
 
}
 if((PINA&0x04)==0)
 276:	ca 99       	sbic	0x19, 2	; 25
 278:	04 c0       	rjmp	.+8      	; 0x282 <key+0xf2>
{
while(!(PINA&0x04))
 27a:	ca 99       	sbic	0x19, 2	; 25
 27c:	02 c0       	rjmp	.+4      	; 0x282 <key+0xf2>
 27e:	8d e2       	ldi	r24, 0x2D	; 45
 280:	05 c0       	rjmp	.+10     	; 0x28c <key+0xfc>
 
 return '-';
 
}
 if((PINA&0x08)==0)
 282:	cb 99       	sbic	0x19, 3	; 25
 284:	93 cf       	rjmp	.-218    	; 0x1ac <key+0x1c>
{
 
 while(!(PINA&0x08))
 286:	cb 99       	sbic	0x19, 3	; 25
 288:	91 cf       	rjmp	.-222    	; 0x1ac <key+0x1c>
 28a:	8b e2       	ldi	r24, 0x2B	; 43
 
} 


}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	08 95       	ret

0000029a <main>:

void main()
{
 29a:	8f 92       	push	r8
 29c:	9f 92       	push	r9
 29e:	af 92       	push	r10
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	29 97       	sbiw	r28, 0x09	; 9
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
unsigned int i,j,flag=0;
unsigned char ar1[]={"1234"},ar2[4];
 2c2:	de 01       	movw	r26, r28
 2c4:	15 96       	adiw	r26, 0x05	; 5
 2c6:	ed e7       	ldi	r30, 0x7D	; 125
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x32>
DDRC=0xFF;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	84 bb       	out	0x14, r24	; 20
DDRB=0xFF;
 2d8:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;	//col
 2da:	81 bb       	out	0x11, r24	; 17
DDRA=0x00;	//row
 2dc:	1a ba       	out	0x1a, r1	; 26
PORTA=0xFF;	//pull up
 2de:	8b bb       	out	0x1b, r24	; 27
PORTD=0x00;
 2e0:	12 ba       	out	0x12, r1	; 18
Lcd_init();
 2e2:	0e 94 ae 00 	call	0x15c	; 0x15c <Lcd_init>
 2e6:	cc 24       	eor	r12, r12
 2e8:	dd 24       	eor	r13, r13
 2ea:	5e 01       	movw	r10, r28
 2ec:	08 94       	sec
 2ee:	a1 1c       	adc	r10, r1
 2f0:	b1 1c       	adc	r11, r1
Lcd_data(ar2[i]);
}

for(j=0;j<4;j++)
{
 if(ar2[j]!=ar1[j])
 2f2:	e5 e0       	ldi	r30, 0x05	; 5
 2f4:	8e 2e       	mov	r8, r30
 2f6:	91 2c       	mov	r9, r1
 2f8:	8c 0e       	add	r8, r28
 2fa:	9d 1e       	adc	r9, r29
DDRB=0xFF;
DDRD=0xFF;	//col
DDRA=0x00;	//row
PORTA=0xFF;	//pull up
PORTD=0x00;
Lcd_init();
 2fc:	75 01       	movw	r14, r10
 2fe:	00 e8       	ldi	r16, 0x80	; 128
//ch=key();
while(1)
{
for(i=0;i<4;i++)
{
ar2[i]=key();
 300:	0e 94 c8 00 	call	0x190	; 0x190 <key>
 304:	18 2f       	mov	r17, r24
 306:	f7 01       	movw	r30, r14
 308:	81 93       	st	Z+, r24
 30a:	7f 01       	movw	r14, r30
Lcd_cmd(0x80+i);
 30c:	80 2f       	mov	r24, r16
 30e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(ar2[i]);
 312:	81 2f       	mov	r24, r17
 314:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
 318:	0f 5f       	subi	r16, 0xFF	; 255
PORTD=0x00;
Lcd_init();
//ch=key();
while(1)
{
for(i=0;i<4;i++)
 31a:	04 38       	cpi	r16, 0x84	; 132
 31c:	89 f7       	brne	.-30     	; 0x300 <main+0x66>
 31e:	00 e0       	ldi	r16, 0x00	; 0
 320:	10 e0       	ldi	r17, 0x00	; 0
Lcd_data(ar2[i]);
}

for(j=0;j<4;j++)
{
 if(ar2[j]!=ar1[j])
 322:	f5 01       	movw	r30, r10
 324:	e0 0f       	add	r30, r16
 326:	f1 1f       	adc	r31, r17
 328:	d4 01       	movw	r26, r8
 32a:	a0 0f       	add	r26, r16
 32c:	b1 1f       	adc	r27, r17
 32e:	90 81       	ld	r25, Z
 330:	8c 91       	ld	r24, X
 332:	98 17       	cp	r25, r24
 334:	19 f0       	breq	.+6      	; 0x33c <main+0xa2>
 flag++;
 336:	08 94       	sec
 338:	c1 1c       	adc	r12, r1
 33a:	d1 1c       	adc	r13, r1
  
  if(flag==0)
 33c:	c1 14       	cp	r12, r1
 33e:	d1 04       	cpc	r13, r1
 340:	31 f4       	brne	.+12     	; 0x34e <main+0xb4>
  {
  Lcd_cmd(0xc2);
 342:	82 ec       	ldi	r24, 0xC2	; 194
 344:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
  Lcd_str("access granted");
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	05 c0       	rjmp	.+10     	; 0x358 <main+0xbe>
  }
  else
  {
  Lcd_cmd(0xc2);
 34e:	82 ec       	ldi	r24, 0xC2	; 194
 350:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
  Lcd_str("access denied");
 354:	8f e6       	ldi	r24, 0x6F	; 111
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 bb 00 	call	0x176	; 0x176 <Lcd_str>
ar2[i]=key();
Lcd_cmd(0x80+i);
Lcd_data(ar2[i]);
}

for(j=0;j<4;j++)
 35c:	0f 5f       	subi	r16, 0xFF	; 255
 35e:	1f 4f       	sbci	r17, 0xFF	; 255
 360:	04 30       	cpi	r16, 0x04	; 4
 362:	11 05       	cpc	r17, r1
 364:	f1 f6       	brne	.-68     	; 0x322 <main+0x88>
 366:	ca cf       	rjmp	.-108    	; 0x2fc <main+0x62>

00000368 <__divmodhi4>:
 368:	97 fb       	bst	r25, 7
 36a:	09 2e       	mov	r0, r25
 36c:	07 26       	eor	r0, r23
 36e:	0a d0       	rcall	.+20     	; 0x384 <__divmodhi4_neg1>
 370:	77 fd       	sbrc	r23, 7
 372:	04 d0       	rcall	.+8      	; 0x37c <__divmodhi4_neg2>
 374:	0c d0       	rcall	.+24     	; 0x38e <__udivmodhi4>
 376:	06 d0       	rcall	.+12     	; 0x384 <__divmodhi4_neg1>
 378:	00 20       	and	r0, r0
 37a:	1a f4       	brpl	.+6      	; 0x382 <__divmodhi4_exit>

0000037c <__divmodhi4_neg2>:
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255

00000382 <__divmodhi4_exit>:
 382:	08 95       	ret

00000384 <__divmodhi4_neg1>:
 384:	f6 f7       	brtc	.-4      	; 0x382 <__divmodhi4_exit>
 386:	90 95       	com	r25
 388:	81 95       	neg	r24
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	08 95       	ret

0000038e <__udivmodhi4>:
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	51 e1       	ldi	r21, 0x11	; 17
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__udivmodhi4_ep>

00000396 <__udivmodhi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	a6 17       	cp	r26, r22
 39c:	b7 07       	cpc	r27, r23
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__udivmodhi4_ep>
 3a0:	a6 1b       	sub	r26, r22
 3a2:	b7 0b       	sbc	r27, r23

000003a4 <__udivmodhi4_ep>:
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	5a 95       	dec	r21
 3aa:	a9 f7       	brne	.-22     	; 0x396 <__udivmodhi4_loop>
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
