
keypwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018a  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001fb  00000000  00000000  0000043b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b7  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  0000072f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  8a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <pwm_init>:
#include<avr/io.h>
#define F_CPU 1000000UL
#include<util/delay.h>

void pwm_init()
{
  92:	83 b7       	in	r24, 0x33	; 51
  94:	8a 66       	ori	r24, 0x6A	; 106
  96:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
 DDRB=(1<<PB3);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	87 bb       	out	0x17, r24	; 23
 }
  9c:	08 95       	ret

0000009e <key>:

unsigned char key()
{
  9e:	4e e0       	ldi	r20, 0x0E	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	22 ee       	ldi	r18, 0xE2	; 226
  a2:	34 e0       	ldi	r19, 0x04	; 4
unsigned char a;

while(1)
{
PORTD=0x0E;
  a4:	42 bb       	out	0x12, r20	; 18
  a6:	c9 01       	movw	r24, r18
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <key+0xa>
_delay_ms(5);
if((PINA&0x01)==0)
  ac:	c8 99       	sbic	0x19, 0	; 25
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <key+0x1a>
{
while(!(PINA&0x01));
  b0:	c8 9b       	sbis	0x19, 0	; 25
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <key+0x12>
 OCR0=50;
  b4:	82 e3       	ldi	r24, 0x32	; 50
  b6:	0b c0       	rjmp	.+22     	; 0xce <key+0x30>
 return OCR0;
}
if((PINA&0x02)==0)
  b8:	c9 99       	sbic	0x19, 1	; 25
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <key+0x26>
{
while(!(PINA&0x02));
  bc:	c9 9b       	sbis	0x19, 1	; 25
  be:	fe cf       	rjmp	.-4      	; 0xbc <key+0x1e>
 OCR0=150;
  c0:	86 e9       	ldi	r24, 0x96	; 150
  c2:	05 c0       	rjmp	.+10     	; 0xce <key+0x30>
 return OCR0;
}
 if((PINA&0x04)==0)
  c4:	ca 99       	sbic	0x19, 2	; 25
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <key+0x36>
{
 while(!(PINA&0x04));
  c8:	ca 9b       	sbis	0x19, 2	; 25
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <key+0x2a>
 OCR0=250;
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	8c bf       	out	0x3c, r24	; 60
 return OCR0;
  d0:	8c b7       	in	r24, 0x3c	; 60
  d2:	08 95       	ret
}
 if((PINA&0x08)==0)
  d4:	cb 99       	sbic	0x19, 3	; 25
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <key+0x6>
{
 while(!(PINA&0x08));
  d8:	cb 9b       	sbis	0x19, 3	; 25
  da:	fe cf       	rjmp	.-4      	; 0xd8 <key+0x3a>
  OCR0=100;
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	8c bf       	out	0x3c, r24	; 60
  return OCR0;
  e0:	8c b7       	in	r24, 0x3c	; 60
} 


}
}
  e2:	08 95       	ret

000000e4 <main>:

int main()
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
#define F_CPU 1000000UL
#include<util/delay.h>

void pwm_init()
{
TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	8a 66       	ori	r24, 0x6A	; 106
  ec:	83 bf       	out	0x33, r24	; 51
 DDRB=(1<<PB3);
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	c9 e1       	ldi	r28, 0x19	; 25
  f4:	d0 e0       	ldi	r29, 0x00	; 0
{
unsigned char ch;
pwm_init();
while(1)
{
ch=key();
  f6:	0e 94 4f 00 	call	0x9e	; 0x9e <key>
  fa:	80 e3       	ldi	r24, 0x30	; 48
  fc:	95 e7       	ldi	r25, 0x75	; 117
  fe:	fe 01       	movw	r30, r28
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x1a>
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <main+0x12>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
