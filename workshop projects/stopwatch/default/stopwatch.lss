
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000002ec  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000059  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003a9  00000000  00000000  0000040b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000158  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000045c  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e4  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000244  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define RS PC0
#define RW PC1
#define EN PC2

void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3c e9       	ldi	r19, 0x9C	; 156
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	20 e4       	ldi	r18, 0x40	; 64
  d6:	3c e9       	ldi	r19, 0x9C	; 156
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(unsigned char i)
{
  fe:	1f 93       	push	r17
 100:	18 2f       	mov	r17, r24
unsigned char d;
Lcd_cmd(0x04);
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 
d=i%10;
Lcd_data(d+48);
 108:	81 2f       	mov	r24, r17
 10a:	6a e0       	ldi	r22, 0x0A	; 10
 10c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodqi4>
 110:	89 2f       	mov	r24, r25
 112:	80 5d       	subi	r24, 0xD0	; 208
 114:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
d=i%10;
Lcd_data(d+48);
 118:	81 2f       	mov	r24, r17
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodqi4>
 120:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodqi4>
 124:	89 2f       	mov	r24, r25
 126:	80 5d       	subi	r24, 0xD0	; 208
 128:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;

Lcd_cmd(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 132:	1f 91       	pop	r17
 134:	08 95       	ret

00000136 <Lcd_init>:

void Lcd_init()
{
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 14e:	08 95       	ret

00000150 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	03 c0       	rjmp	.+6      	; 0x15e <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 15e:	88 81       	ld	r24, Y
 160:	88 23       	and	r24, r24
 162:	d1 f7       	brne	.-12     	; 0x158 <Lcd_str+0x8>
Lcd_data(*str++);
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:
}
}
*/

void main()
{
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
unsigned int set=0;
unsigned char m,h,s;
DDRC=0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	84 bb       	out	0x14, r24	; 20
DDRB=0xFF;
 17c:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;	//col
 17e:	81 bb       	out	0x11, r24	; 17
DDRA=0x00;	//row
 180:	1a ba       	out	0x1a, r1	; 26
PORTA=0xFF;	//pull up
 182:	8b bb       	out	0x1b, r24	; 27
PORTD=0x00;
 184:	12 ba       	out	0x12, r1	; 18
Lcd_init();
 186:	0e 94 9b 00 	call	0x136	; 0x136 <Lcd_init>
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	60 e9       	ldi	r22, 0x90	; 144
 190:	c6 2e       	mov	r12, r22
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	d6 2e       	mov	r13, r22
while(1)
{ 
	label:

Lcd_cmd(0x80);
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("Stop Watch");
 19c:	80 e6       	ldi	r24, 0x60	; 96
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
 1a4:	88 ee       	ldi	r24, 0xE8	; 232
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	f6 01       	movw	r30, r12
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <main+0x3e>
_delay_ms(100);
Lcd_cmd(0xC2);
 1b2:	82 ec       	ldi	r24, 0xC2	; 194
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("00");
 1b8:	8b e6       	ldi	r24, 0x6B	; 107
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
Lcd_cmd(0xC5);
 1c0:	85 ec       	ldi	r24, 0xC5	; 197
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("00");
 1c6:	8b e6       	ldi	r24, 0x6B	; 107
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
Lcd_cmd(0xC8);
 1ce:	88 ec       	ldi	r24, 0xC8	; 200
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("00");
 1d4:	8b e6       	ldi	r24, 0x6B	; 107
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
Lcd_cmd(0xC4);
 1dc:	84 ec       	ldi	r24, 0xC4	; 196
 1de:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(':');
 1e2:	8a e3       	ldi	r24, 0x3A	; 58
 1e4:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0xC7);
 1e8:	87 ec       	ldi	r24, 0xC7	; 199
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(':');
 1ee:	8a e3       	ldi	r24, 0x3A	; 58
 1f0:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>

PORTD=0x0E;
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	82 bb       	out	0x12, r24	; 18
 1f8:	80 ea       	ldi	r24, 0xA0	; 160
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x92>
_delay_ms(1);
if((PINA&0x01)==0)
 200:	c8 99       	sbic	0x19, 0	; 25
 202:	c9 cf       	rjmp	.-110    	; 0x196 <main+0x2c>
 204:	62 c0       	rjmp	.+196    	; 0x2ca <main+0x160>
{
while(!(PINA&0x01))
{
 Lcd_cmd(0x80);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("   Start   ");
 20c:	8e e6       	ldi	r24, 0x6E	; 110
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
 214:	ff 24       	eor	r15, r15
 
for(h=0;h<=12;h++)
{
Lcd_cmd(0xC3);
 216:	83 ec       	ldi	r24, 0xC3	; 195
 218:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_num(h);
 21c:	8f 2d       	mov	r24, r15
 21e:	0e 94 7f 00 	call	0xfe	; 0xfe <Lcd_num>
 222:	00 e0       	ldi	r16, 0x00	; 0
//_delay_ms(100);
for(m=0;m<=59;m++)
{
Lcd_cmd(0xC6);
 224:	86 ec       	ldi	r24, 0xC6	; 198
 226:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_num(m);
 22a:	80 2f       	mov	r24, r16
 22c:	0e 94 7f 00 	call	0xfe	; 0xfe <Lcd_num>
 230:	10 e0       	ldi	r17, 0x00	; 0
//_delay_ms(100);
for(s=0;s<=59;s++)
{
Lcd_cmd(0xC9);
 232:	89 ec       	ldi	r24, 0xC9	; 201
 234:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_num(s);
 238:	81 2f       	mov	r24, r17
 23a:	0e 94 7f 00 	call	0xfe	; 0xfe <Lcd_num>
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	97 e2       	ldi	r25, 0x27	; 39
 242:	f6 01       	movw	r30, r12
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24a:	d9 f7       	brne	.-10     	; 0x242 <main+0xd8>
_delay_ms(1000);

if((PINA&0x02)==0)
 24c:	c9 99       	sbic	0x19, 1	; 25
 24e:	1c c0       	rjmp	.+56     	; 0x288 <main+0x11e>
{
while(!(PINA&0x02));
 250:	c9 9b       	sbis	0x19, 1	; 25
 252:	fe cf       	rjmp	.-4      	; 0x250 <main+0xe6>
 set++;
 254:	21 96       	adiw	r28, 0x01	; 1
 if(set==1)
 256:	c1 30       	cpi	r28, 0x01	; 1
 258:	d1 05       	cpc	r29, r1
 25a:	51 f4       	brne	.+20     	; 0x270 <main+0x106>
 {
 Lcd_cmd(0x80);
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 Lcd_str("   PAUSE   ");
 262:	8a e7       	ldi	r24, 0x7A	; 122
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
 while((PINA&0x02)==0x02);
 26a:	c9 99       	sbic	0x19, 1	; 25
 26c:	fe cf       	rjmp	.-4      	; 0x26a <main+0x100>
 26e:	0c c0       	rjmp	.+24     	; 0x288 <main+0x11e>
 }
 if(set==2)
 270:	c2 30       	cpi	r28, 0x02	; 2
 272:	d1 05       	cpc	r29, r1
 274:	49 f4       	brne	.+18     	; 0x288 <main+0x11e>
 {
 Lcd_cmd(0x80);
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 Lcd_str("   Start   ");
 27c:	8e e6       	ldi	r24, 0x6E	; 110
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
 set=0;
 }
}

if((PINA&0x04)==0)
 288:	ca 9b       	sbis	0x19, 2	; 25
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <main+0x142>
 28c:	11 c0       	rjmp	.+34     	; 0x2b0 <main+0x146>
{
 while((PINA&0x04)==0)
 {
 Lcd_cmd(0x80);
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 Lcd_str("   Stop   ");
 294:	86 e8       	ldi	r24, 0x86	; 134
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 a8 00 	call	0x150	; 0x150 <Lcd_str>
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	97 e2       	ldi	r25, 0x27	; 39
 2a0:	f6 01       	movw	r30, r12
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	d9 f7       	brne	.-10     	; 0x2a0 <main+0x136>
 2aa:	75 cf       	rjmp	.-278    	; 0x196 <main+0x2c>
 }
}

if((PINA&0x04)==0)
{
 while((PINA&0x04)==0)
 2ac:	ca 9b       	sbis	0x19, 2	; 25
 2ae:	ef cf       	rjmp	.-34     	; 0x28e <main+0x124>
for(m=0;m<=59;m++)
{
Lcd_cmd(0xC6);
Lcd_num(m);
//_delay_ms(100);
for(s=0;s<=59;s++)
 2b0:	1f 5f       	subi	r17, 0xFF	; 255
 2b2:	1c 33       	cpi	r17, 0x3C	; 60
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <main+0x14e>
 2b6:	bd cf       	rjmp	.-134    	; 0x232 <main+0xc8>
for(h=0;h<=12;h++)
{
Lcd_cmd(0xC3);
Lcd_num(h);
//_delay_ms(100);
for(m=0;m<=59;m++)
 2b8:	0f 5f       	subi	r16, 0xFF	; 255
 2ba:	0c 33       	cpi	r16, 0x3C	; 60
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0x156>
 2be:	b2 cf       	rjmp	.-156    	; 0x224 <main+0xba>
while(!(PINA&0x01))
{
 Lcd_cmd(0x80);
Lcd_str("   Start   ");
 
for(h=0;h<=12;h++)
 2c0:	f3 94       	inc	r15
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
 2c4:	f8 16       	cp	r15, r24
 2c6:	09 f0       	breq	.+2      	; 0x2ca <main+0x160>
 2c8:	a6 cf       	rjmp	.-180    	; 0x216 <main+0xac>

PORTD=0x0E;
_delay_ms(1);
if((PINA&0x01)==0)
{
while(!(PINA&0x01))
 2ca:	c8 99       	sbic	0x19, 0	; 25
 2cc:	64 cf       	rjmp	.-312    	; 0x196 <main+0x2c>
 2ce:	9b cf       	rjmp	.-202    	; 0x206 <main+0x9c>

000002d0 <__udivmodqi4>:
 2d0:	99 1b       	sub	r25, r25
 2d2:	79 e0       	ldi	r23, 0x09	; 9
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <__udivmodqi4_ep>

000002d6 <__udivmodqi4_loop>:
 2d6:	99 1f       	adc	r25, r25
 2d8:	96 17       	cp	r25, r22
 2da:	08 f0       	brcs	.+2      	; 0x2de <__udivmodqi4_ep>
 2dc:	96 1b       	sub	r25, r22

000002de <__udivmodqi4_ep>:
 2de:	88 1f       	adc	r24, r24
 2e0:	7a 95       	dec	r23
 2e2:	c9 f7       	brne	.-14     	; 0x2d6 <__udivmodqi4_loop>
 2e4:	80 95       	com	r24
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
