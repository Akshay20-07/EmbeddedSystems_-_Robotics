
flyingbird.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000079  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003c5  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015c  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000044e  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f8  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000018e  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Lcd_cmd>:
#define RS PC0
#define RW PC1
#define EN PC2

void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3c e9       	ldi	r19, 0x9C	; 156
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	20 e4       	ldi	r18, 0x40	; 64
  d6:	3c e9       	ldi	r19, 0x9C	; 156
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(int i)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	0e c0       	rjmp	.+28     	; 0x128 <Lcd_num+0x2a>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	ce 01       	movw	r24, r28
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 4d 01 	call	0x29a	; 0x29a <__divmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	ce 01       	movw	r24, r28
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 4d 01 	call	0x29a	; 0x29a <__divmodhi4>
 126:	eb 01       	movw	r28, r22

void Lcd_num(int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 128:	20 97       	sbiw	r28, 0x00	; 0
 12a:	81 f7       	brne	.-32     	; 0x10c <Lcd_num+0xe>
{ 
d=i%10;
Lcd_data(d+48);
i/=10;
}
Lcd_cmd(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_init>:

void Lcd_init()
{
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 150:	08 95       	ret

00000152 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	03 c0       	rjmp	.+6      	; 0x160 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	d1 f7       	brne	.-12     	; 0x15a <Lcd_str+0x8>
Lcd_data(*str++);
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <Lcd_animation>:

void Lcd_animation()
{
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x40);
Lcd_data(0x11);
 172:	81 e1       	ldi	r24, 0x11	; 17
 174:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x0A);
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x04);
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x1F);
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x00);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x00);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x00);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>

}
 19c:	08 95       	ret

0000019e <Lcd_anima>:

void Lcd_anima()
{
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x40);
Lcd_data(0x00);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x00);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x00);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x1F);
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x04);
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x0A);
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_data(0x11);
 1c8:	81 e1       	ldi	r24, 0x11	; 17
 1ca:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>

}
 1ce:	08 95       	ret

000001d0 <main>:

void main()
{
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
int i,j;
DDRC=0xFF;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	84 bb       	out	0x14, r24	; 20
Lcd_init();
 1de:	0e 94 9c 00 	call	0x138	; 0x138 <Lcd_init>
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	60 e9       	ldi	r22, 0x90	; 144
 1e8:	e6 2e       	mov	r14, r22
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	f6 2e       	mov	r15, r22
 1ee:	26 c0       	rjmp	.+76     	; 0x23c <main+0x6c>
while(1)
{
for(i=0x80;i<=0xA7;i++)
{
j=i+1;
 1f0:	ec 01       	movw	r28, r24
 1f2:	21 96       	adiw	r28, 0x01	; 1
Lcd_cmd(i);
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(0);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_anima();
 1fe:	0e 94 cf 00 	call	0x19e	; 0x19e <Lcd_anima>
 202:	80 ea       	ldi	r24, 0xA0	; 160
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	f7 01       	movw	r30, r14
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20e:	d9 f7       	brne	.-10     	; 0x206 <main+0x36>
_delay_ms(400);
Lcd_cmd(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>


Lcd_cmd(j);
 216:	8c 2f       	mov	r24, r28
 218:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_animation();
 222:	0e 94 b6 00 	call	0x16c	; 0x16c <Lcd_animation>
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	9f e0       	ldi	r25, 0x0F	; 15
 22a:	f7 01       	movw	r30, r14
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 232:	d9 f7       	brne	.-10     	; 0x22a <main+0x5a>
_delay_ms(400);
Lcd_cmd(0x01);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 23a:	ce 01       	movw	r24, r28
int i,j;
DDRC=0xFF;
Lcd_init();
while(1)
{
for(i=0x80;i<=0xA7;i++)
 23c:	88 3a       	cpi	r24, 0xA8	; 168
 23e:	91 05       	cpc	r25, r1
 240:	bc f2       	brlt	.-82     	; 0x1f0 <main+0x20>
 242:	17 ee       	ldi	r17, 0xE7	; 231
}

for(i=0xE7;i>=0xC0;i--)
{
j=i-1;
Lcd_cmd(i);
 244:	81 2f       	mov	r24, r17
 246:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_anima();
 250:	0e 94 cf 00 	call	0x19e	; 0x19e <Lcd_anima>
 254:	80 ea       	ldi	r24, 0xA0	; 160
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	f7 01       	movw	r30, r14
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 260:	d9 f7       	brne	.-10     	; 0x258 <main+0x88>
_delay_ms(400);
Lcd_cmd(0x01);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>

Lcd_cmd(j);
 268:	81 2f       	mov	r24, r17
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(0);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_animation();
 276:	0e 94 b6 00 	call	0x16c	; 0x16c <Lcd_animation>
 27a:	80 ea       	ldi	r24, 0xA0	; 160
 27c:	9f e0       	ldi	r25, 0x0F	; 15
 27e:	f7 01       	movw	r30, r14
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 284:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 286:	d9 f7       	brne	.-10     	; 0x27e <main+0xae>
_delay_ms(400);
Lcd_cmd(0x01);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 28e:	11 50       	subi	r17, 0x01	; 1
_delay_ms(400);
Lcd_cmd(0x01);

}

for(i=0xE7;i>=0xC0;i--)
 290:	1f 3b       	cpi	r17, 0xBF	; 191
 292:	c1 f6       	brne	.-80     	; 0x244 <main+0x74>
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	d1 cf       	rjmp	.-94     	; 0x23c <main+0x6c>

0000029a <__divmodhi4>:
 29a:	97 fb       	bst	r25, 7
 29c:	09 2e       	mov	r0, r25
 29e:	07 26       	eor	r0, r23
 2a0:	0a d0       	rcall	.+20     	; 0x2b6 <__divmodhi4_neg1>
 2a2:	77 fd       	sbrc	r23, 7
 2a4:	04 d0       	rcall	.+8      	; 0x2ae <__divmodhi4_neg2>
 2a6:	0c d0       	rcall	.+24     	; 0x2c0 <__udivmodhi4>
 2a8:	06 d0       	rcall	.+12     	; 0x2b6 <__divmodhi4_neg1>
 2aa:	00 20       	and	r0, r0
 2ac:	1a f4       	brpl	.+6      	; 0x2b4 <__divmodhi4_exit>

000002ae <__divmodhi4_neg2>:
 2ae:	70 95       	com	r23
 2b0:	61 95       	neg	r22
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255

000002b4 <__divmodhi4_exit>:
 2b4:	08 95       	ret

000002b6 <__divmodhi4_neg1>:
 2b6:	f6 f7       	brtc	.-4      	; 0x2b4 <__divmodhi4_exit>
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <__udivmodhi4>:
 2c0:	aa 1b       	sub	r26, r26
 2c2:	bb 1b       	sub	r27, r27
 2c4:	51 e1       	ldi	r21, 0x11	; 17
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <__udivmodhi4_ep>

000002c8 <__udivmodhi4_loop>:
 2c8:	aa 1f       	adc	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	a6 17       	cp	r26, r22
 2ce:	b7 07       	cpc	r27, r23
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__udivmodhi4_ep>
 2d2:	a6 1b       	sub	r26, r22
 2d4:	b7 0b       	sbc	r27, r23

000002d6 <__udivmodhi4_ep>:
 2d6:	88 1f       	adc	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	5a 95       	dec	r21
 2dc:	a9 f7       	brne	.-22     	; 0x2c8 <__udivmodhi4_loop>
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
