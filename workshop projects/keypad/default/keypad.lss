
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f2  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e6  00000000  00000000  000003b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000268  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ae  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a0  00000000  00000000  000007d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 1000000UL
#include<util/delay.h>

void main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
DDRA=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFF;
  9a:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;	//col
  9c:	81 bb       	out	0x11, r24	; 17
DDRC=0x00;	//row
  9e:	14 ba       	out	0x14, r1	; 20
PORTC=0xFF;	//pull up
  a0:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	62 ee       	ldi	r22, 0xE2	; 226
  a4:	74 e0       	ldi	r23, 0x04	; 4
_delay_ms(5);
if((PINC&0x01)==0)
{
while(!(PINC&0x01))
{
 PORTB=0x01;
  a6:	01 e0       	ldi	r16, 0x01	; 1
  a8:	29 e1       	ldi	r18, 0x19	; 25
  aa:	30 e0       	ldi	r19, 0x00	; 0
}
else if((PINC&0x02)==0)
{
while(!(PINC&0x02))
 {
  PORTB=0x04;
  ac:	14 e0       	ldi	r17, 0x04	; 4
}
else if((PINC&0x04)==0)
{
 while(!(PINC&0x04))
 {
  PORTA=0x80;
  ae:	b0 e8       	ldi	r27, 0x80	; 128
  b0:	48 ea       	ldi	r20, 0xA8	; 168
  b2:	51 e6       	ldi	r21, 0x61	; 97
}
else if((PINC&0x08)==0)
{
 while(!(PINC&0x08))
 {
  PORTB=0xF0;
  b4:	a0 ef       	ldi	r26, 0xF0	; 240
DDRD=0xFF;	//col
DDRC=0x00;	//row
PORTC=0xFF;	//pull up
while(1)
{
PORTD=0x00;
  b6:	12 ba       	out	0x12, r1	; 18
  b8:	cb 01       	movw	r24, r22
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x28>
_delay_ms(5);
if((PINC&0x01)==0)
  be:	98 9b       	sbis	0x13, 0	; 19
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <main+0x44>
  c2:	0c c0       	rjmp	.+24     	; 0xdc <main+0x4a>
{
while(!(PINC&0x01))
{
 PORTB=0x01;
  c4:	08 bb       	out	0x18, r16	; 24
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	97 e2       	ldi	r25, 0x27	; 39
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x38>
 _delay_ms(1000);
 PORTB=0x00;
  d4:	18 ba       	out	0x18, r1	; 24
{
PORTD=0x00;
_delay_ms(5);
if((PINC&0x01)==0)
{
while(!(PINC&0x01))
  d6:	98 9b       	sbis	0x13, 0	; 19
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <main+0x32>
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x24>
 PORTB=0x01;
 _delay_ms(1000);
 PORTB=0x00;
 }
}
else if((PINC&0x02)==0)
  dc:	99 9b       	sbis	0x13, 1	; 19
  de:	0a c0       	rjmp	.+20     	; 0xf4 <main+0x62>
  e0:	0c c0       	rjmp	.+24     	; 0xfa <main+0x68>
{
while(!(PINC&0x02))
 {
  PORTB=0x04;
  e2:	18 bb       	out	0x18, r17	; 24
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	97 e2       	ldi	r25, 0x27	; 39
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x56>
  _delay_ms(1000);
 PORTB=0x00;
  f2:	18 ba       	out	0x18, r1	; 24
 PORTB=0x00;
 }
}
else if((PINC&0x02)==0)
{
while(!(PINC&0x02))
  f4:	99 9b       	sbis	0x13, 1	; 19
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <main+0x50>
  f8:	de cf       	rjmp	.-68     	; 0xb6 <main+0x24>
  PORTB=0x04;
  _delay_ms(1000);
 PORTB=0x00;
 }
}
else if((PINC&0x04)==0)
  fa:	9a 9b       	sbis	0x13, 2	; 19
  fc:	06 c0       	rjmp	.+12     	; 0x10a <main+0x78>
  fe:	08 c0       	rjmp	.+16     	; 0x110 <main+0x7e>
{
 while(!(PINC&0x04))
 {
  PORTA=0x80;
 100:	bb bb       	out	0x1b, r27	; 27
 102:	ca 01       	movw	r24, r20
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x72>
  _delay_ms(100);
 PORTA=0x00;
 108:	1b ba       	out	0x1b, r1	; 27
 PORTB=0x00;
 }
}
else if((PINC&0x04)==0)
{
 while(!(PINC&0x04))
 10a:	9a 9b       	sbis	0x13, 2	; 19
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <main+0x6e>
 10e:	d3 cf       	rjmp	.-90     	; 0xb6 <main+0x24>
  PORTA=0x80;
  _delay_ms(100);
 PORTA=0x00;
 }
}
else if((PINC&0x08)==0)
 110:	9b 9b       	sbis	0x13, 3	; 19
 112:	0a c0       	rjmp	.+20     	; 0x128 <main+0x96>
 114:	d0 cf       	rjmp	.-96     	; 0xb6 <main+0x24>
{
 while(!(PINC&0x08))
 {
  PORTB=0xF0;
 116:	a8 bb       	out	0x18, r26	; 24
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	97 e2       	ldi	r25, 0x27	; 39
 11c:	f9 01       	movw	r30, r18
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x8a>
  _delay_ms(1000);
 PORTB=0x00;
 126:	18 ba       	out	0x18, r1	; 24
 PORTA=0x00;
 }
}
else if((PINC&0x08)==0)
{
 while(!(PINC&0x08))
 128:	9b 9b       	sbis	0x13, 3	; 19
 12a:	f5 cf       	rjmp	.-22     	; 0x116 <main+0x84>
 12c:	c4 cf       	rjmp	.-120    	; 0xb6 <main+0x24>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
