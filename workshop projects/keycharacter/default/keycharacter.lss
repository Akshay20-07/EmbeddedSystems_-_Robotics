
keycharacter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000046a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  0000046c  000004e0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007c  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003df  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017a  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000529  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fd  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fa  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 01 	call	0x35e	; 0x35e <main>
  8a:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define EN PC2
#define del 0x7F
unsigned char count=1,loc,inc=0;

void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	24 ec       	ldi	r18, 0xC4	; 196
  d6:	39 e0       	ldi	r19, 0x09	; 9
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(int i)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	8c 01       	movw	r16, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	1f c0       	rjmp	.+62     	; 0x14a <Lcd_num+0x4c>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	c8 01       	movw	r24, r16
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	c8 01       	movw	r24, r16
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 126:	16 2f       	mov	r17, r22
 128:	07 2f       	mov	r16, r23
d=i%10;
Lcd_data(d+48);
 12a:	86 2f       	mov	r24, r22
 12c:	97 2f       	mov	r25, r23
 12e:	6a e0       	ldi	r22, 0x0A	; 10
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 136:	80 5d       	subi	r24, 0xD0	; 208
 138:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 13c:	81 2f       	mov	r24, r17
 13e:	90 2f       	mov	r25, r16
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 148:	8b 01       	movw	r16, r22

void Lcd_num(int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 14a:	01 15       	cp	r16, r1
 14c:	11 05       	cpc	r17, r1
 14e:	f1 f6       	brne	.-68     	; 0x10c <Lcd_num+0xe>
i/=10;
d=i%10;
Lcd_data(d+48);
i/=10;
}
Lcd_cmd(0x06);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <Lcd_init>:

void Lcd_init()
{
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 162:	88 e2       	ldi	r24, 0x28	; 40
 164:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 174:	08 95       	ret

00000176 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	03 c0       	rjmp	.+6      	; 0x184 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 184:	88 81       	ld	r24, Y
 186:	88 23       	and	r24, r24
 188:	d1 f7       	brne	.-12     	; 0x17e <Lcd_str+0x8>
Lcd_data(*str++);
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <key1>:



unsigned char key1()
{
 190:	1f 93       	push	r17
unsigned char a;
unsigned int i=0;
 inc=0;
 192:	10 92 62 00 	sts	0x0062, r1
 196:	30 91 60 00 	lds	r19, 0x0060
 19a:	40 91 63 00 	lds	r20, 0x0063
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	20 e0       	ldi	r18, 0x00	; 0
else
{
i++;
}

PORTD=0x0E;
 1a4:	1e e0       	ldi	r17, 0x0E	; 14
 1a6:	e2 ee       	ldi	r30, 0xE2	; 226
 1a8:	f4 e0       	ldi	r31, 0x04	; 4
 return 'g';
  //Lcd_cmd(0x01);
 
} 

PORTD=0x0D;
 1aa:	bd e0       	ldi	r27, 0x0D	; 13
{
 while(!(PINA&0x08));
 return 't';
} 

PORTD=0x0B;
 1ac:	ab e0       	ldi	r26, 0x0B	; 11
{
 while(!(PINA&0x08));
return ' ';
} 

PORTD=0x07;
 1ae:	57 e0       	ldi	r21, 0x07	; 7
unsigned char a;
unsigned int i=0;
 inc=0;
while(1)
{
if((i==200)&&(inc==0))
 1b0:	68 3c       	cpi	r22, 0xC8	; 200
 1b2:	71 05       	cpc	r23, r1
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <key1+0x32>
 1b6:	22 23       	and	r18, r18
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <key1+0x32>
{ 
loc+=1;
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	31 e0       	ldi	r19, 0x01	; 1
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <key1+0x36>
count=1;
inc=1;
}
else
{
i++;
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
}

PORTD=0x0E;
 1c6:	12 bb       	out	0x12, r17	; 18
 1c8:	cf 01       	movw	r24, r30
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <key1+0x3a>
_delay_ms(5);
if((PINA&0x01)==0)
 1ce:	c8 99       	sbic	0x19, 0	; 25
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <key1+0x56>
 1d2:	20 93 62 00 	sts	0x0062, r18
 1d6:	30 93 60 00 	sts	0x0060, r19
 1da:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x01));
 1de:	c8 9b       	sbis	0x19, 0	; 25
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <key1+0x4e>
 1e2:	81 e2       	ldi	r24, 0x21	; 33
 1e4:	ba c0       	rjmp	.+372    	; 0x35a <key1+0x1ca>
 return '!';
}
if((PINA&0x02)==0)
 1e6:	c9 99       	sbic	0x19, 1	; 25
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <key1+0x6e>
 1ea:	20 93 62 00 	sts	0x0062, r18
 1ee:	30 93 60 00 	sts	0x0060, r19
 1f2:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x02));
 1f6:	c9 9b       	sbis	0x19, 1	; 25
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <key1+0x66>
 1fa:	81 e6       	ldi	r24, 0x61	; 97
 1fc:	ae c0       	rjmp	.+348    	; 0x35a <key1+0x1ca>
 
 return 'a';
}
 if((PINA&0x04)==0)
 1fe:	ca 99       	sbic	0x19, 2	; 25
 200:	0a c0       	rjmp	.+20     	; 0x216 <key1+0x86>
 202:	20 93 62 00 	sts	0x0062, r18
 206:	30 93 60 00 	sts	0x0060, r19
 20a:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x04));
 20e:	ca 9b       	sbis	0x19, 2	; 25
 210:	fe cf       	rjmp	.-4      	; 0x20e <key1+0x7e>
 212:	84 e6       	ldi	r24, 0x64	; 100
 214:	a2 c0       	rjmp	.+324    	; 0x35a <key1+0x1ca>
 return 'd';
}
 if((PINA&0x08)==0)
 216:	cb 99       	sbic	0x19, 3	; 25
 218:	0a c0       	rjmp	.+20     	; 0x22e <key1+0x9e>
 21a:	20 93 62 00 	sts	0x0062, r18
 21e:	30 93 60 00 	sts	0x0060, r19
 222:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x08));
 226:	cb 9b       	sbis	0x19, 3	; 25
 228:	fe cf       	rjmp	.-4      	; 0x226 <key1+0x96>
 22a:	87 e6       	ldi	r24, 0x67	; 103
 22c:	96 c0       	rjmp	.+300    	; 0x35a <key1+0x1ca>
 return 'g';
  //Lcd_cmd(0x01);
 
} 

PORTD=0x0D;
 22e:	b2 bb       	out	0x12, r27	; 18
 230:	cf 01       	movw	r24, r30
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <key1+0xa2>
_delay_ms(5);
if((PINA&0x01)==0)
 236:	c8 99       	sbic	0x19, 0	; 25
 238:	0a c0       	rjmp	.+20     	; 0x24e <key1+0xbe>
 23a:	20 93 62 00 	sts	0x0062, r18
 23e:	30 93 60 00 	sts	0x0060, r19
 242:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x01));
 246:	c8 9b       	sbis	0x19, 0	; 25
 248:	fe cf       	rjmp	.-4      	; 0x246 <key1+0xb6>
 24a:	8a e6       	ldi	r24, 0x6A	; 106
 24c:	86 c0       	rjmp	.+268    	; 0x35a <key1+0x1ca>
return'j';
}
if((PINA&0x02)==0)
 24e:	c9 99       	sbic	0x19, 1	; 25
 250:	0a c0       	rjmp	.+20     	; 0x266 <key1+0xd6>
 252:	20 93 62 00 	sts	0x0062, r18
 256:	30 93 60 00 	sts	0x0060, r19
 25a:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x02));
 25e:	c9 9b       	sbis	0x19, 1	; 25
 260:	fe cf       	rjmp	.-4      	; 0x25e <key1+0xce>
 262:	8d e6       	ldi	r24, 0x6D	; 109
 264:	7a c0       	rjmp	.+244    	; 0x35a <key1+0x1ca>
return 'm';
}
 if((PINA&0x04)==0)
 266:	ca 99       	sbic	0x19, 2	; 25
 268:	0a c0       	rjmp	.+20     	; 0x27e <key1+0xee>
 26a:	20 93 62 00 	sts	0x0062, r18
 26e:	30 93 60 00 	sts	0x0060, r19
 272:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x04));
 276:	ca 9b       	sbis	0x19, 2	; 25
 278:	fe cf       	rjmp	.-4      	; 0x276 <key1+0xe6>
 27a:	80 e7       	ldi	r24, 0x70	; 112
 27c:	6e c0       	rjmp	.+220    	; 0x35a <key1+0x1ca>
 return 'p';
}
 if((PINA&0x08)==0)
 27e:	cb 99       	sbic	0x19, 3	; 25
 280:	0a c0       	rjmp	.+20     	; 0x296 <key1+0x106>
 282:	20 93 62 00 	sts	0x0062, r18
 286:	30 93 60 00 	sts	0x0060, r19
 28a:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x08));
 28e:	cb 9b       	sbis	0x19, 3	; 25
 290:	fe cf       	rjmp	.-4      	; 0x28e <key1+0xfe>
 292:	84 e7       	ldi	r24, 0x74	; 116
 294:	62 c0       	rjmp	.+196    	; 0x35a <key1+0x1ca>
 return 't';
} 

PORTD=0x0B;
 296:	a2 bb       	out	0x12, r26	; 18
 298:	cf 01       	movw	r24, r30
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <key1+0x10a>
_delay_ms(5);
if((PINA&0x01)==0)
 29e:	c8 99       	sbic	0x19, 0	; 25
 2a0:	0a c0       	rjmp	.+20     	; 0x2b6 <key1+0x126>
 2a2:	20 93 62 00 	sts	0x0062, r18
 2a6:	30 93 60 00 	sts	0x0060, r19
 2aa:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x01));
 2ae:	c8 9b       	sbis	0x19, 0	; 25
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <key1+0x11e>
 2b2:	87 e7       	ldi	r24, 0x77	; 119
 2b4:	52 c0       	rjmp	.+164    	; 0x35a <key1+0x1ca>
return 'w';
}
if((PINA&0x02)==0)
 2b6:	c9 99       	sbic	0x19, 1	; 25
 2b8:	0a c0       	rjmp	.+20     	; 0x2ce <key1+0x13e>
 2ba:	20 93 62 00 	sts	0x0062, r18
 2be:	30 93 60 00 	sts	0x0060, r19
 2c2:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x02));
 2c6:	c9 9b       	sbis	0x19, 1	; 25
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <key1+0x136>
 2ca:	8f e7       	ldi	r24, 0x7F	; 127
 2cc:	46 c0       	rjmp	.+140    	; 0x35a <key1+0x1ca>
return del;
}
 if((PINA&0x04)==0)
 2ce:	ca 99       	sbic	0x19, 2	; 25
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <key1+0x154>
 2d2:	20 93 62 00 	sts	0x0062, r18
 2d6:	30 93 60 00 	sts	0x0060, r19
 2da:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x04));
 2de:	ca 9b       	sbis	0x19, 2	; 25
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <key1+0x14e>
 2e2:	3a c0       	rjmp	.+116    	; 0x358 <key1+0x1c8>
 return ' ';
}
 if((PINA&0x08)==0)
 2e4:	cb 99       	sbic	0x19, 3	; 25
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <key1+0x16a>
 2e8:	20 93 62 00 	sts	0x0062, r18
 2ec:	30 93 60 00 	sts	0x0060, r19
 2f0:	40 93 63 00 	sts	0x0063, r20
{
 while(!(PINA&0x08));
 2f4:	cb 9b       	sbis	0x19, 3	; 25
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <key1+0x164>
 2f8:	2f c0       	rjmp	.+94     	; 0x358 <key1+0x1c8>
return ' ';
} 

PORTD=0x07;
 2fa:	52 bb       	out	0x12, r21	; 18
 2fc:	cf 01       	movw	r24, r30
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <key1+0x16e>
_delay_ms(5);
if((PINA&0x01)==0)
 302:	c8 99       	sbic	0x19, 0	; 25
 304:	09 c0       	rjmp	.+18     	; 0x318 <key1+0x188>
 306:	20 93 62 00 	sts	0x0062, r18
 30a:	30 93 60 00 	sts	0x0060, r19
 30e:	40 93 63 00 	sts	0x0063, r20
{

while(!(PINA&0x01));
 312:	c8 9b       	sbis	0x19, 0	; 25
 314:	fe cf       	rjmp	.-4      	; 0x312 <key1+0x182>
 316:	20 c0       	rjmp	.+64     	; 0x358 <key1+0x1c8>

return ' ';
 
}
if((PINA&0x02)==0)
 318:	c9 99       	sbic	0x19, 1	; 25
 31a:	09 c0       	rjmp	.+18     	; 0x32e <key1+0x19e>
 31c:	20 93 62 00 	sts	0x0062, r18
 320:	30 93 60 00 	sts	0x0060, r19
 324:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x02));
 328:	c9 9b       	sbis	0x19, 1	; 25
 32a:	fe cf       	rjmp	.-4      	; 0x328 <key1+0x198>
 32c:	15 c0       	rjmp	.+42     	; 0x358 <key1+0x1c8>
 return ' ';
 
}
 if((PINA&0x04)==0)
 32e:	ca 99       	sbic	0x19, 2	; 25
 330:	09 c0       	rjmp	.+18     	; 0x344 <key1+0x1b4>
 332:	20 93 62 00 	sts	0x0062, r18
 336:	30 93 60 00 	sts	0x0060, r19
 33a:	40 93 63 00 	sts	0x0063, r20
{
while(!(PINA&0x04));
 33e:	ca 9b       	sbis	0x19, 2	; 25
 340:	fe cf       	rjmp	.-4      	; 0x33e <key1+0x1ae>
 342:	0a c0       	rjmp	.+20     	; 0x358 <key1+0x1c8>
 return ' ';
 
}
 if((PINA&0x08)==0)
 344:	cb 99       	sbic	0x19, 3	; 25
 346:	34 cf       	rjmp	.-408    	; 0x1b0 <key1+0x20>
 348:	20 93 62 00 	sts	0x0062, r18
 34c:	30 93 60 00 	sts	0x0060, r19
 350:	40 93 63 00 	sts	0x0063, r20
{
 
 while(!(PINA&0x08));
 354:	cb 9b       	sbis	0x19, 3	; 25
 356:	fe cf       	rjmp	.-4      	; 0x354 <key1+0x1c4>
 358:	80 e2       	ldi	r24, 0x20	; 32
 
} 


}
}
 35a:	1f 91       	pop	r17
 35c:	08 95       	ret

0000035e <main>:

int main()
{
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
unsigned char key,pre_key=0,max,current_key;
DDRC=0xFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	84 bb       	out	0x14, r24	; 20
DDRB=0xFF;
 36e:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;	//col
 370:	81 bb       	out	0x11, r24	; 17
DDRA=0x00;	//row
 372:	1a ba       	out	0x1a, r1	; 26
PORTA=0xFF;	//pull up
 374:	8b bb       	out	0x1b, r24	; 27
PORTD=0x00;
 376:	12 ba       	out	0x12, r1	; 18
Lcd_init();
 378:	0e 94 ae 00 	call	0x15c	; 0x15c <Lcd_init>
//ch=key();

loc=0x7F;
 37c:	8f e7       	ldi	r24, 0x7F	; 127
 37e:	80 93 63 00 	sts	0x0063, r24
 382:	ff 24       	eor	r15, r15

else if(pre_key==key && count>=1)
{
current_key=key+count-1;
if(count==max)
count=1;
 384:	cc 24       	eor	r12, r12
 386:	c3 94       	inc	r12

if(pre_key!=key)
{
if(inc==0)
loc+=1;
count=2;
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	d6 2e       	mov	r13, r22
 38c:	01 c0       	rjmp	.+2      	; 0x390 <main+0x32>
PORTA=0xFF;	//pull up
PORTD=0x00;
Lcd_init();
//ch=key();

loc=0x7F;
 38e:	f1 2e       	mov	r15, r17
while(1)
{
key=key1();
 390:	0e 94 c8 00 	call	0x190	; 0x190 <key1>
 394:	18 2f       	mov	r17, r24
if(key=='!')
 396:	81 32       	cpi	r24, 0x21	; 33
 398:	e9 f1       	breq	.+122    	; 0x414 <main+0xb6>
max=15;
if(key>='a' && key>='o')
 39a:	8f 36       	cpi	r24, 0x6F	; 111
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <main+0x4a>
max=3;
if(key>='p')
 39e:	8f 36       	cpi	r24, 0x6F	; 111
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <main+0x48>
 3a2:	04 e0       	ldi	r16, 0x04	; 4
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <main+0x4a>
 3a6:	03 e0       	ldi	r16, 0x03	; 3
max=4;

if(pre_key!=key)
 3a8:	f1 16       	cp	r15, r17
 3aa:	69 f0       	breq	.+26     	; 0x3c6 <main+0x68>
{
if(inc==0)
 3ac:	80 91 62 00 	lds	r24, 0x0062
 3b0:	88 23       	and	r24, r24
 3b2:	29 f4       	brne	.+10     	; 0x3be <main+0x60>
loc+=1;
 3b4:	80 91 63 00 	lds	r24, 0x0063
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 63 00 	sts	0x0063, r24
count=2;
 3be:	d0 92 60 00 	sts	0x0060, r13
 3c2:	e1 2e       	mov	r14, r17
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <main+0x88>
current_key=key;
}

else if(pre_key==key && count>=1)
 3c6:	80 91 60 00 	lds	r24, 0x0060
 3ca:	88 23       	and	r24, r24
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <main+0x88>
{
current_key=key+count-1;
 3ce:	81 50       	subi	r24, 0x01	; 1
 3d0:	e8 2e       	mov	r14, r24
 3d2:	e1 0e       	add	r14, r17
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
if(count==max)
 3d6:	80 17       	cp	r24, r16
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <main+0x82>
count=1;
 3da:	c0 92 60 00 	sts	0x0060, r12
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <main+0x88>
else
count+=1;
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 60 00 	sts	0x0060, r24
}

if(key==del)
 3e6:	1f 37       	cpi	r17, 0x7F	; 127
 3e8:	69 f4       	brne	.+26     	; 0x404 <main+0xa6>
{
Lcd_cmd(loc);
 3ea:	80 91 63 00 	lds	r24, 0x0063
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(' ');
 3f2:	80 e2       	ldi	r24, 0x20	; 32
 3f4:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
loc-=1;
 3f8:	80 91 63 00 	lds	r24, 0x0063
 3fc:	81 50       	subi	r24, 0x01	; 1
 3fe:	80 93 63 00 	sts	0x0063, r24
 402:	c5 cf       	rjmp	.-118    	; 0x38e <main+0x30>
}
else 
{
Lcd_cmd(loc);
 404:	80 91 63 00 	lds	r24, 0x0063
 408:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(current_key);
 40c:	8e 2d       	mov	r24, r14
 40e:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
 412:	bd cf       	rjmp	.-134    	; 0x38e <main+0x30>
 414:	0f e0       	ldi	r16, 0x0F	; 15
 416:	c8 cf       	rjmp	.-112    	; 0x3a8 <main+0x4a>

00000418 <__divmodhi4>:
 418:	97 fb       	bst	r25, 7
 41a:	09 2e       	mov	r0, r25
 41c:	07 26       	eor	r0, r23
 41e:	0a d0       	rcall	.+20     	; 0x434 <__divmodhi4_neg1>
 420:	77 fd       	sbrc	r23, 7
 422:	04 d0       	rcall	.+8      	; 0x42c <__divmodhi4_neg2>
 424:	0c d0       	rcall	.+24     	; 0x43e <__udivmodhi4>
 426:	06 d0       	rcall	.+12     	; 0x434 <__divmodhi4_neg1>
 428:	00 20       	and	r0, r0
 42a:	1a f4       	brpl	.+6      	; 0x432 <__divmodhi4_exit>

0000042c <__divmodhi4_neg2>:
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255

00000432 <__divmodhi4_exit>:
 432:	08 95       	ret

00000434 <__divmodhi4_neg1>:
 434:	f6 f7       	brtc	.-4      	; 0x432 <__divmodhi4_exit>
 436:	90 95       	com	r25
 438:	81 95       	neg	r24
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <__udivmodhi4>:
 43e:	aa 1b       	sub	r26, r26
 440:	bb 1b       	sub	r27, r27
 442:	51 e1       	ldi	r21, 0x11	; 17
 444:	07 c0       	rjmp	.+14     	; 0x454 <__udivmodhi4_ep>

00000446 <__udivmodhi4_loop>:
 446:	aa 1f       	adc	r26, r26
 448:	bb 1f       	adc	r27, r27
 44a:	a6 17       	cp	r26, r22
 44c:	b7 07       	cpc	r27, r23
 44e:	10 f0       	brcs	.+4      	; 0x454 <__udivmodhi4_ep>
 450:	a6 1b       	sub	r26, r22
 452:	b7 0b       	sbc	r27, r23

00000454 <__udivmodhi4_ep>:
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	5a 95       	dec	r21
 45a:	a9 f7       	brne	.-22     	; 0x446 <__udivmodhi4_loop>
 45c:	80 95       	com	r24
 45e:	90 95       	com	r25
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
