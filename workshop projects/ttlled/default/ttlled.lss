
ttlled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000002fe  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009b  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a9  00000000  00000000  00000443  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bf  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004d6  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000113  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000216  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  8a:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define RS PC0
#define RW PC1
#define EN PC2

void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3c e9       	ldi	r19, 0x9C	; 156
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	20 e4       	ldi	r18, 0x40	; 64
  d6:	3c e9       	ldi	r19, 0x9C	; 156
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(int i)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	0e c0       	rjmp	.+28     	; 0x128 <Lcd_num+0x2a>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	ce 01       	movw	r24, r28
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 56 01 	call	0x2ac	; 0x2ac <__divmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	ce 01       	movw	r24, r28
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 56 01 	call	0x2ac	; 0x2ac <__divmodhi4>
 126:	eb 01       	movw	r28, r22

void Lcd_num(int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 128:	20 97       	sbiw	r28, 0x00	; 0
 12a:	81 f7       	brne	.-32     	; 0x10c <Lcd_num+0xe>
{ 
d=i%10;
Lcd_data(d+48);
i/=10;
}
Lcd_cmd(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_init>:

void Lcd_init()
{
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 150:	08 95       	ret

00000152 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	03 c0       	rjmp	.+6      	; 0x160 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	d1 f7       	brne	.-12     	; 0x15a <Lcd_str+0x8>
Lcd_data(*str++);
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <usart_init>:

void usart_init()
{
 16c:	10 bc       	out	0x20, r1	; 32
UBRRH=(ubrr_value>>8);
UBRRL= ubrr_value;
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	89 b9       	out	0x09, r24	; 9
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 172:	80 b5       	in	r24, 0x20	; 32
 174:	86 68       	ori	r24, 0x86	; 134
 176:	80 bd       	out	0x20, r24	; 32
UCSRB|=(1<<RXEN)|(1<<TXEN);
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	88 61       	ori	r24, 0x18	; 24
 17c:	8a b9       	out	0x0a, r24	; 10
}
 17e:	08 95       	ret

00000180 <usart_transmit>:
void usart_transmit(unsigned char d)
{
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <usart_transmit>
while(!(UCSRA&(1<<UDRE)));
UDR=d;
 184:	8c b9       	out	0x0c, r24	; 12
}
 186:	08 95       	ret

00000188 <usart_recieve>:
unsigned char usart_recieve()
{
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <usart_recieve>
while(!(UCSRA&(1<<RXC)));
return UDR;
 18c:	8c b1       	in	r24, 0x0c	; 12
}
 18e:	08 95       	ret

00000190 <usart_str>:
 
 void usart_str (unsigned char *str)
{
 190:	fc 01       	movw	r30, r24
 192:	04 c0       	rjmp	.+8      	; 0x19c <usart_str+0xc>
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
 194:	5d 9b       	sbis	0x0b, 5	; 11
 196:	fe cf       	rjmp	.-4      	; 0x194 <usart_str+0x4>
}
 
 void usart_str (unsigned char *str)
{
while(*str)
usart_transmit(*str++);
 198:	31 96       	adiw	r30, 0x01	; 1
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
UDR=d;
 19a:	8c b9       	out	0x0c, r24	; 12
return UDR;
}
 
 void usart_str (unsigned char *str)
{
while(*str)
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	c9 f7       	brne	.-14     	; 0x194 <usart_str+0x4>
usart_transmit(*str++);
}
 1a2:	08 95       	ret

000001a4 <main>:
int main()
{
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
unsigned char v;
DDRC=0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bb       	out	0x14, r24	; 20
DDRB=0XFF;
 1b2:	87 bb       	out	0x17, r24	; 23
DDRA=0xFF;
 1b4:	8a bb       	out	0x1a, r24	; 26
Lcd_data(*str++);
}

void usart_init()
{
UBRRH=(ubrr_value>>8);
 1b6:	10 bc       	out	0x20, r1	; 32
UBRRL= ubrr_value;
 1b8:	87 e6       	ldi	r24, 0x67	; 103
 1ba:	89 b9       	out	0x09, r24	; 9
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 1bc:	80 b5       	in	r24, 0x20	; 32
 1be:	86 68       	ori	r24, 0x86	; 134
 1c0:	80 bd       	out	0x20, r24	; 32
UCSRB|=(1<<RXEN)|(1<<TXEN);
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	88 61       	ori	r24, 0x18	; 24
 1c6:	8a b9       	out	0x0a, r24	; 10
unsigned char v;
DDRC=0xFF;
DDRB=0XFF;
DDRA=0xFF;
usart_init();
Lcd_init();
 1c8:	0e 94 9c 00 	call	0x138	; 0x138 <Lcd_init>
{
Lcd_cmd(0x01);
Lcd_cmd(0xC0);
Lcd_str("buzzer");
usart_str("buzzer");
PORTA=0x80;
 1cc:	60 e8       	ldi	r22, 0x80	; 128
 1ce:	f6 2e       	mov	r15, r22
 1d0:	c0 e9       	ldi	r28, 0x90	; 144
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
{
Lcd_cmd(0x01);
Lcd_cmd(0xC0);
Lcd_str("on");
usart_str("ON");
PORTB=0xFF;
 1d4:	0f ef       	ldi	r16, 0xFF	; 255
while(!(UCSRA&(1<<UDRE)));
UDR=d;
}
unsigned char usart_recieve()
{
while(!(UCSRA&(1<<RXC)));
 1d6:	5f 9b       	sbis	0x0b, 7	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x32>
return UDR;
 1da:	1c b1       	in	r17, 0x0c	; 12
usart_init();
Lcd_init();
while(1)
{
v=usart_recieve();
Lcd_cmd(0x86);
 1dc:	86 e8       	ldi	r24, 0x86	; 134
 1de:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_data(v);
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>

if( v=='a'||  v=='A')
 1e8:	11 36       	cpi	r17, 0x61	; 97
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <main+0x4c>
 1ec:	11 34       	cpi	r17, 0x41	; 65
 1ee:	e1 f4       	brne	.+56     	; 0x228 <main+0x84>
{
Lcd_cmd(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0xC0);
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("on");
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
 204:	e3 e6       	ldi	r30, 0x63	; 99
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	04 c0       	rjmp	.+8      	; 0x212 <main+0x6e>
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
 20a:	5d 9b       	sbis	0x0b, 5	; 11
 20c:	fe cf       	rjmp	.-4      	; 0x20a <main+0x66>
}
 
 void usart_str (unsigned char *str)
{
while(*str)
usart_transmit(*str++);
 20e:	31 96       	adiw	r30, 0x01	; 1
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
UDR=d;
 210:	8c b9       	out	0x0c, r24	; 12
return UDR;
}
 
 void usart_str (unsigned char *str)
{
while(*str)
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	c9 f7       	brne	.-14     	; 0x20a <main+0x66>
{
Lcd_cmd(0x01);
Lcd_cmd(0xC0);
Lcd_str("on");
usart_str("ON");
PORTB=0xFF;
 218:	08 bb       	out	0x18, r16	; 24
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	97 e2       	ldi	r25, 0x27	; 39
 21e:	fe 01       	movw	r30, r28
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x7c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d9 f7       	brne	.-10     	; 0x21e <main+0x7a>
_delay_ms(1000);
}
if(v=='q'|| v=='Q')
 228:	11 37       	cpi	r17, 0x71	; 113
 22a:	11 f0       	breq	.+4      	; 0x230 <main+0x8c>
 22c:	11 35       	cpi	r17, 0x51	; 81
 22e:	e1 f4       	brne	.+56     	; 0x268 <main+0xc4>
{
Lcd_cmd(0x01);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0xC0);
 236:	80 ec       	ldi	r24, 0xC0	; 192
 238:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("off");
 23c:	86 e6       	ldi	r24, 0x66	; 102
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
 244:	ea e6       	ldi	r30, 0x6A	; 106
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	04 c0       	rjmp	.+8      	; 0x252 <main+0xae>
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <main+0xa6>
}
 
 void usart_str (unsigned char *str)
{
while(*str)
usart_transmit(*str++);
 24e:	31 96       	adiw	r30, 0x01	; 1
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
UDR=d;
 250:	8c b9       	out	0x0c, r24	; 12
return UDR;
}
 
 void usart_str (unsigned char *str)
{
while(*str)
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	c9 f7       	brne	.-14     	; 0x24a <main+0xa6>
{
Lcd_cmd(0x01);
Lcd_cmd(0xC0);
Lcd_str("off");
usart_str("OFF");
PORTB=0x00;
 258:	18 ba       	out	0x18, r1	; 24
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	97 e2       	ldi	r25, 0x27	; 39
 25e:	fe 01       	movw	r30, r28
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 264:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 266:	d9 f7       	brne	.-10     	; 0x25e <main+0xba>
_delay_ms(1000);
}
if(v=='z' ||  v=='Z')
 268:	1a 37       	cpi	r17, 0x7A	; 122
 26a:	19 f0       	breq	.+6      	; 0x272 <main+0xce>
 26c:	1a 35       	cpi	r17, 0x5A	; 90
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0xce>
 270:	b2 cf       	rjmp	.-156    	; 0x1d6 <main+0x32>
{
Lcd_cmd(0x01);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0xC0);
 278:	80 ec       	ldi	r24, 0xC0	; 192
 27a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("buzzer");
 27e:	8e e6       	ldi	r24, 0x6E	; 110
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
 286:	ee e6       	ldi	r30, 0x6E	; 110
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	04 c0       	rjmp	.+8      	; 0x294 <main+0xf0>
UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
 28c:	5d 9b       	sbis	0x0b, 5	; 11
 28e:	fe cf       	rjmp	.-4      	; 0x28c <main+0xe8>
}
 
 void usart_str (unsigned char *str)
{
while(*str)
usart_transmit(*str++);
 290:	31 96       	adiw	r30, 0x01	; 1
UCSRB|=(1<<RXEN)|(1<<TXEN);
}
void usart_transmit(unsigned char d)
{
while(!(UCSRA&(1<<UDRE)));
UDR=d;
 292:	8c b9       	out	0x0c, r24	; 12
return UDR;
}
 
 void usart_str (unsigned char *str)
{
while(*str)
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	c9 f7       	brne	.-14     	; 0x28c <main+0xe8>
{
Lcd_cmd(0x01);
Lcd_cmd(0xC0);
Lcd_str("buzzer");
usart_str("buzzer");
PORTA=0x80;
 29a:	fb ba       	out	0x1b, r15	; 27
 29c:	88 ee       	ldi	r24, 0xE8	; 232
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	fe 01       	movw	r30, r28
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	d9 f7       	brne	.-10     	; 0x2a0 <main+0xfc>
 2aa:	95 cf       	rjmp	.-214    	; 0x1d6 <main+0x32>

000002ac <__divmodhi4>:
 2ac:	97 fb       	bst	r25, 7
 2ae:	09 2e       	mov	r0, r25
 2b0:	07 26       	eor	r0, r23
 2b2:	0a d0       	rcall	.+20     	; 0x2c8 <__divmodhi4_neg1>
 2b4:	77 fd       	sbrc	r23, 7
 2b6:	04 d0       	rcall	.+8      	; 0x2c0 <__divmodhi4_neg2>
 2b8:	0c d0       	rcall	.+24     	; 0x2d2 <__udivmodhi4>
 2ba:	06 d0       	rcall	.+12     	; 0x2c8 <__divmodhi4_neg1>
 2bc:	00 20       	and	r0, r0
 2be:	1a f4       	brpl	.+6      	; 0x2c6 <__divmodhi4_exit>

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__divmodhi4_neg1>:
 2c8:	f6 f7       	brtc	.-4      	; 0x2c6 <__divmodhi4_exit>
 2ca:	90 95       	com	r25
 2cc:	81 95       	neg	r24
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	08 95       	ret

000002d2 <__udivmodhi4>:
 2d2:	aa 1b       	sub	r26, r26
 2d4:	bb 1b       	sub	r27, r27
 2d6:	51 e1       	ldi	r21, 0x11	; 17
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <__udivmodhi4_ep>

000002da <__udivmodhi4_loop>:
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	a6 17       	cp	r26, r22
 2e0:	b7 07       	cpc	r27, r23
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <__udivmodhi4_ep>
 2e4:	a6 1b       	sub	r26, r22
 2e6:	b7 0b       	sbc	r27, r23

000002e8 <__udivmodhi4_ep>:
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	5a 95       	dec	r21
 2ee:	a9 f7       	brne	.-22     	; 0x2da <__udivmodhi4_loop>
 2f0:	80 95       	com	r24
 2f2:	90 95       	com	r25
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
