
motortouch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000027a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000073  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000030e  00000000  00000000  00000389  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000185  00000000  00000000  00000697  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f6  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000103  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e9  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  8a:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <adc_init>:
#define RS PC0
#define RW PC1
#define EN PC2

void adc_init()
{
  92:	3e 9a       	sbi	0x07, 6	; 7
ADMUX|=(1<<REFS0);
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	87 68       	ori	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <adc_read>:

unsigned int adc_read(unsigned char channel)
{
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|channel;
ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6

while(!(ADCSRA&(1<<ADIF)));
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6

return(ADC);
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5
}
  ac:	c9 01       	movw	r24, r18
  ae:	08 95       	ret

000000b0 <lcd_cmd>:

void lcd_cmd(unsigned char c)
{
  b0:	28 2f       	mov	r18, r24
  b2:	20 7f       	andi	r18, 0xF0	; 240
  b4:	25 bb       	out	0x15, r18	; 21
lcd=(c & 0xF0);
lcd&=~(1<<RS);  //RS=0
  b6:	a8 98       	cbi	0x15, 0	; 21
lcd&=~(1<<RW);  //RW=0
  b8:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);   //EN=1
  ba:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	20 e4       	ldi	r18, 0x40	; 64
  be:	3c e9       	ldi	r19, 0x9C	; 156
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_cmd+0x12>
_delay_ms(10);
lcd&=~(1<<EN);  //EN=0
  c6:	aa 98       	cbi	0x15, 2	; 21
lcd=((c<<4) & 0xF0);
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	44 e0       	ldi	r20, 0x04	; 4
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	4a 95       	dec	r20
  d2:	e1 f7       	brne	.-8      	; 0xcc <lcd_cmd+0x1c>
  d4:	85 bb       	out	0x15, r24	; 21
lcd&=~(1<<RS);
  d6:	a8 98       	cbi	0x15, 0	; 21
lcd&=~(1<<RW);
  d8:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);
  da:	aa 9a       	sbi	0x15, 2	; 21
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_cmd+0x2e>
_delay_ms(10);
lcd&=~(1<<EN);
  e2:	aa 98       	cbi	0x15, 2	; 21
}
  e4:	08 95       	ret

000000e6 <lcd_data>:

void lcd_data(unsigned char c)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
lcd=(c & 0xF0);
lcd|=(1<<RS);   //RS=1
  ec:	a8 9a       	sbi	0x15, 0	; 21
lcd&=~(1<<RW);  //RW=0
  ee:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);   //EN=1
  f0:	aa 9a       	sbi	0x15, 2	; 21
  f2:	20 e4       	ldi	r18, 0x40	; 64
  f4:	3c e9       	ldi	r19, 0x9C	; 156
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x12>
_delay_ms(10);
lcd&=~(1<<EN);  //EN=0
  fc:	aa 98       	cbi	0x15, 2	; 21
lcd=((c<<4) & 0xF0);
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	54 e0       	ldi	r21, 0x04	; 4
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	5a 95       	dec	r21
 108:	e1 f7       	brne	.-8      	; 0x102 <lcd_data+0x1c>
 10a:	85 bb       	out	0x15, r24	; 21
lcd|=(1<<RS);
 10c:	a8 9a       	sbi	0x15, 0	; 21
lcd&=~(1<<RW);
 10e:	a9 98       	cbi	0x15, 1	; 21
lcd|=(1<<EN);
 110:	aa 9a       	sbi	0x15, 2	; 21
 112:	c9 01       	movw	r24, r18
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_data+0x2e>
_delay_ms(10);
lcd&=~(1<<EN);
 118:	aa 98       	cbi	0x15, 2	; 21
}
 11a:	08 95       	ret

0000011c <lcd_init>:


void lcd_init()
{
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_cmd(0x02);
lcd_cmd(0x28);
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_cmd(0x06);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_cmd(0x0C);
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
}
 134:	08 95       	ret

00000136 <lcd_num>:

void lcd_num(int i)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
int d=0;
lcd_cmd(0x04);  //decreament cursor
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 142:	0e c0       	rjmp	.+28     	; 0x160 <lcd_num+0x2a>
while(i!=0)
{
d=i%10;
lcd_data(d+48);   //adding ASCII vslue of 0
 144:	ce 01       	movw	r24, r28
 146:	6a e0       	ldi	r22, 0x0A	; 10
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 14 01 	call	0x228	; 0x228 <__divmodhi4>
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
i/=10;
 154:	ce 01       	movw	r24, r28
 156:	6a e0       	ldi	r22, 0x0A	; 10
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 14 01 	call	0x228	; 0x228 <__divmodhi4>
 15e:	eb 01       	movw	r28, r22

void lcd_num(int i)
{
int d=0;
lcd_cmd(0x04);  //decreament cursor
while(i!=0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	81 f7       	brne	.-32     	; 0x144 <lcd_num+0xe>
{
d=i%10;
lcd_data(d+48);   //adding ASCII vslue of 0
i/=10;
}
lcd_cmd(0x06);  //increament cursor
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_str>:

void lcd_str(unsigned char *str)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	03 c0       	rjmp	.+6      	; 0x17e <lcd_str+0xe>
while(*str)
lcd_data(*str++);
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_cmd(0x06);  //increament cursor
}

void lcd_str(unsigned char *str)
{
while(*str)
 17e:	88 81       	ld	r24, Y
 180:	88 23       	and	r24, r24
 182:	d1 f7       	brne	.-12     	; 0x178 <lcd_str+0x8>
lcd_data(*str++);
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:

void main()
{ 
 18a:	af 92       	push	r10
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
unsigned int x,y;
DDRC=0xff;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 bb       	out	0x14, r24	; 20
DDRA=0x00;
 19e:	1a ba       	out	0x1a, r1	; 26
PORTB=0x00;
 1a0:	18 ba       	out	0x18, r1	; 24
DDRB=0xFF;
 1a2:	87 bb       	out	0x17, r24	; 23
lcd_init();
 1a4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_init>
#define RW PC1
#define EN PC2

void adc_init()
{
ADMUX|=(1<<REFS0);
 1a8:	3e 9a       	sbi	0x07, 6	; 7
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	87 68       	ori	r24, 0x87	; 135
 1ae:	86 b9       	out	0x06, r24	; 6
DDRA=0x00;
PORTB=0x00;
DDRB=0xFF;
lcd_init();
adc_init();
lcd_cmd(0x01);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>

while(1)
{
DDRA=0x05;
 1b6:	b5 e0       	ldi	r27, 0x05	; 5
 1b8:	ab 2e       	mov	r10, r27
PORTA=0x03;
 1ba:	a3 e0       	ldi	r26, 0x03	; 3
 1bc:	ba 2e       	mov	r11, r26
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1be:	f1 e4       	ldi	r31, 0x41	; 65
 1c0:	cf 2e       	mov	r12, r31
//x=x/4;
lcd_cmd(0x80);
lcd_str("x: ");
lcd_cmd(0x84);
lcd_num(x);
DDRA=0x0A;
 1c2:	ea e0       	ldi	r30, 0x0A	; 10
 1c4:	de 2e       	mov	r13, r30
PORTA=0x06;
 1c6:	76 e0       	ldi	r23, 0x06	; 6
 1c8:	e7 2e       	mov	r14, r23
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1ca:	62 e4       	ldi	r22, 0x42	; 66
 1cc:	f6 2e       	mov	r15, r22
adc_init();
lcd_cmd(0x01);

while(1)
{
DDRA=0x05;
 1ce:	aa ba       	out	0x1a, r10	; 26
PORTA=0x03;
 1d0:	bb ba       	out	0x1b, r11	; 27
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1d2:	c7 b8       	out	0x07, r12	; 7
ADCSRA|=(1<<ADSC);
 1d4:	36 9a       	sbi	0x06, 6	; 6

while(!(ADCSRA&(1<<ADIF)));
 1d6:	34 9b       	sbis	0x06, 4	; 6
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x4c>
ADCSRA|=(1<<ADIF);
 1da:	34 9a       	sbi	0x06, 4	; 6

return(ADC);
 1dc:	04 b1       	in	r16, 0x04	; 4
 1de:	15 b1       	in	r17, 0x05	; 5
{
DDRA=0x05;
PORTA=0x03;
x=adc_read(1);
//x=x/4;
lcd_cmd(0x80);
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_str("x: ");
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_str>
lcd_cmd(0x84);
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_num(x);
 1f4:	c8 01       	movw	r24, r16
 1f6:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_num>
DDRA=0x0A;
 1fa:	da ba       	out	0x1a, r13	; 26
PORTA=0x06;
 1fc:	eb ba       	out	0x1b, r14	; 27
ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

unsigned int adc_read(unsigned char channel)
{
ADMUX=0x40|channel;
 1fe:	f7 b8       	out	0x07, r15	; 7
ADCSRA|=(1<<ADSC);
 200:	36 9a       	sbi	0x06, 6	; 6

while(!(ADCSRA&(1<<ADIF)));
 202:	34 9b       	sbis	0x06, 4	; 6
 204:	fe cf       	rjmp	.-4      	; 0x202 <main+0x78>
ADCSRA|=(1<<ADIF);
 206:	34 9a       	sbi	0x06, 4	; 6

return(ADC);
 208:	04 b1       	in	r16, 0x04	; 4
 20a:	15 b1       	in	r17, 0x05	; 5
lcd_num(x);
DDRA=0x0A;
PORTA=0x06;
y=adc_read(2);
//y=y/4;
lcd_cmd(0xC0);
 20c:	80 ec       	ldi	r24, 0xC0	; 192
 20e:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_str("y: ");
 212:	84 e6       	ldi	r24, 0x64	; 100
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_str>
lcd_cmd(0xC4);
 21a:	84 ec       	ldi	r24, 0xC4	; 196
 21c:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
lcd_num(y);
 220:	c8 01       	movw	r24, r16
 222:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_num>
 226:	d3 cf       	rjmp	.-90     	; 0x1ce <main+0x44>

00000228 <__divmodhi4>:
 228:	97 fb       	bst	r25, 7
 22a:	09 2e       	mov	r0, r25
 22c:	07 26       	eor	r0, r23
 22e:	0a d0       	rcall	.+20     	; 0x244 <__divmodhi4_neg1>
 230:	77 fd       	sbrc	r23, 7
 232:	04 d0       	rcall	.+8      	; 0x23c <__divmodhi4_neg2>
 234:	0c d0       	rcall	.+24     	; 0x24e <__udivmodhi4>
 236:	06 d0       	rcall	.+12     	; 0x244 <__divmodhi4_neg1>
 238:	00 20       	and	r0, r0
 23a:	1a f4       	brpl	.+6      	; 0x242 <__divmodhi4_exit>

0000023c <__divmodhi4_neg2>:
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255

00000242 <__divmodhi4_exit>:
 242:	08 95       	ret

00000244 <__divmodhi4_neg1>:
 244:	f6 f7       	brtc	.-4      	; 0x242 <__divmodhi4_exit>
 246:	90 95       	com	r25
 248:	81 95       	neg	r24
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	08 95       	ret

0000024e <__udivmodhi4>:
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	51 e1       	ldi	r21, 0x11	; 17
 254:	07 c0       	rjmp	.+14     	; 0x264 <__udivmodhi4_ep>

00000256 <__udivmodhi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	a6 17       	cp	r26, r22
 25c:	b7 07       	cpc	r27, r23
 25e:	10 f0       	brcs	.+4      	; 0x264 <__udivmodhi4_ep>
 260:	a6 1b       	sub	r26, r22
 262:	b7 0b       	sbc	r27, r23

00000264 <__udivmodhi4_ep>:
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	5a 95       	dec	r21
 26a:	a9 f7       	brne	.-22     	; 0x256 <__udivmodhi4_loop>
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
