
eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       0000000e  00810000  00810000  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000081  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000472  00000000  00000000  0000045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000190  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ff  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014e  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  8a:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
  92:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
  94:	e1 99       	sbic	0x1c, 1	; 28
  96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  98:	3f bb       	out	0x1f, r19	; 31
  9a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
  9c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  9e:	8d b3       	in	r24, 0x1d	; 29
}
  a0:	08 95       	ret

000000a2 <lcd_command>:
 	lcd_command(0x28);
	lcd_command(0x06);
	lcd_command(0x0c);
}
void lcd_command(unsigned char com)
	{
  a2:	28 2f       	mov	r18, r24
  a4:	20 7f       	andi	r18, 0xF0	; 240
  a6:	25 bb       	out	0x15, r18	; 21
	lcd = com & 0xF0;		//send higher bit

	lcd &= ~(1<<rs); 		//rs =0
  a8:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);		//rw =0
  aa:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);			//en =1
  ac:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	2a ef       	ldi	r18, 0xFA	; 250
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_command+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  b8:	aa 98       	cbi	0x15, 2	; 21
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x1a>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	4a 95       	dec	r20
  ca:	e1 f7       	brne	.-8      	; 0xc4 <lcd_command+0x22>
  cc:	85 bb       	out	0x15, r24	; 21

	lcd &= ~(1<<rs); 		//rs =0
  ce:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);		//rw =0
  d0:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);			//en =1
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  da:	aa 98       	cbi	0x15, 2	; 21
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_command+0x3c>
	_delay_ms(1);
	}
  e2:	08 95       	ret

000000e4 <lcd_init>:

	return 0;
}

void lcd_init()
{
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_command(0x02);
 	lcd_command(0x28);
  ea:	88 e2       	ldi	r24, 0x28	; 40
  ec:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_command(0x06);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_command(0x0c);
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
}
  fc:	08 95       	ret

000000fe <lcd_data>:
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{
  fe:	28 2f       	mov	r18, r24
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	25 bb       	out	0x15, r18	; 21

	lcd =value & 0xF0;		//send higher bit

	lcd |= (1<<rs); 		//rs =1
 104:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);		//rw =0
 106:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);			//en =1
 108:	aa 9a       	sbi	0x15, 2	; 21
 10a:	2a ef       	ldi	r18, 0xFA	; 250
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 114:	aa 98       	cbi	0x15, 2	; 21
 116:	f9 01       	movw	r30, r18
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x1a>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	54 e0       	ldi	r21, 0x04	; 4
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_data+0x22>
 128:	85 bb       	out	0x15, r24	; 21

	lcd |= (1<<rs); 		//rs =1
 12a:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);		//rw =0
 12c:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);			//en =1
 12e:	aa 9a       	sbi	0x15, 2	; 21
 130:	c9 01       	movw	r24, r18
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 136:	aa 98       	cbi	0x15, 2	; 21
 138:	c9 01       	movw	r24, r18
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x3c>
	_delay_ms(1);
	}
 13e:	08 95       	ret

00000140 <lcd_string>:
	}

}

void lcd_string(char *str)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <lcd_string+0xc>
	int i=0;
	while(str[i]!='\0')
	{
	lcd_data(str[i]);
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
}

void lcd_string(char *str)
{
	int i=0;
	while(str[i]!='\0')
 14c:	89 91       	ld	r24, Y+
 14e:	88 23       	and	r24, r24
 150:	d9 f7       	brne	.-10     	; 0x148 <lcd_string+0x8>
	{
	lcd_data(str[i]);
	i++;
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_clear>:
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
	
void lcd_clear(unsigned char pos)
{
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	11 f4       	brne	.+4      	; 0x160 <lcd_clear+0x8>
	if(pos==1)
	{
	lcd_command(0x80);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_clear+0xe>
	lcd_string("                ");
	}
	else if(pos==2)
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	41 f4       	brne	.+16     	; 0x174 <lcd_clear+0x1c>
	{
	lcd_command(0xc0);
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_string("                ");
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 172:	08 95       	ret
	}
	else if(pos==3)
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	71 f4       	brne	.+28     	; 0x194 <lcd_clear+0x3c>
	{
	lcd_command(0x80);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_string("                ");
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
	lcd_command(0xc0);
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_string("                ");
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 194:	08 95       	ret

00000196 <lcd_number>:
	i++;
	}
}

void lcd_number(unsigned int value)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>

	if(value==0)
 1a2:	20 97       	sbiw	r28, 0x00	; 0
 1a4:	91 f4       	brne	.+36     	; 0x1ca <lcd_number+0x34>
	lcd_data(value+48);
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
 1ac:	0e c0       	rjmp	.+28     	; 0x1ca <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 1ae:	ce 01       	movw	r24, r28
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodhi4>
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
	value=value/10;
 1be:	ce 01       	movw	r24, r28
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodhi4>
 1c8:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 1ca:	20 97       	sbiw	r28, 0x00	; 0
 1cc:	81 f7       	brne	.-32     	; 0x1ae <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <main>:
	then you have to program the .eep file into eeprom 
*/
	char eeprom_data[] EEMEM= "i3indya tech\0";

int main()
{	
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2d 97       	sbiw	r28, 0x0d	; 13
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	char ram_data[13];
	DDRC = 0XFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	84 bb       	out	0x14, r24	; 20

	lcd_init();
 1f6:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_init>
    \a __dst.
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
 1fa:	29 e4       	ldi	r18, 0x49	; 73
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	4d e0       	ldi	r20, 0x0D	; 13
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	8e 01       	movw	r16, r28
 208:	0f 5f       	subi	r16, 0xFF	; 255
 20a:	1f 4f       	sbci	r17, 0xFF	; 255
 20c:	c8 01       	movw	r24, r16
 20e:	0e 94 1c 01 	call	0x238	; 0x238 <__eerd_block>
	
	eeprom_read_block(ram_data,eeprom_data,13);


	lcd_command(0x80);
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_command>
	lcd_string(ram_data);
 218:	c8 01       	movw	r24, r16
 21a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
	//lcd_string("Enter password");
	

	return 0;
}
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	2d 96       	adiw	r28, 0x0d	; 13
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <__eerd_block>:
 238:	a0 e0       	ldi	r26, 0x00	; 0
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e2 e2       	ldi	r30, 0x22	; 34
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__prologue_saves__+0x14>
 244:	7c 01       	movw	r14, r24
 246:	eb 01       	movw	r28, r22
 248:	8a 01       	movw	r16, r20
 24a:	69 01       	movw	r12, r18
 24c:	09 c0       	rjmp	.+18     	; 0x260 <__eerd_block+0x28>
 24e:	ce 01       	movw	r24, r28
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	f6 01       	movw	r30, r12
 254:	09 95       	icall
 256:	f7 01       	movw	r30, r14
 258:	81 93       	st	Z+, r24
 25a:	7f 01       	movw	r14, r30
 25c:	01 50       	subi	r16, 0x01	; 1
 25e:	10 40       	sbci	r17, 0x00	; 0
 260:	01 15       	cp	r16, r1
 262:	11 05       	cpc	r17, r1
 264:	a1 f7       	brne	.-24     	; 0x24e <__eerd_block+0x16>
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	e8 e0       	ldi	r30, 0x08	; 8
 26c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__epilogue_restores__+0x14>

00000270 <__udivmodhi4>:
 270:	aa 1b       	sub	r26, r26
 272:	bb 1b       	sub	r27, r27
 274:	51 e1       	ldi	r21, 0x11	; 17
 276:	07 c0       	rjmp	.+14     	; 0x286 <__udivmodhi4_ep>

00000278 <__udivmodhi4_loop>:
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	a6 17       	cp	r26, r22
 27e:	b7 07       	cpc	r27, r23
 280:	10 f0       	brcs	.+4      	; 0x286 <__udivmodhi4_ep>
 282:	a6 1b       	sub	r26, r22
 284:	b7 0b       	sbc	r27, r23

00000286 <__udivmodhi4_ep>:
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	5a 95       	dec	r21
 28c:	a9 f7       	brne	.-22     	; 0x278 <__udivmodhi4_loop>
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	08 95       	ret

00000298 <__prologue_saves__>:
 298:	2f 92       	push	r2
 29a:	3f 92       	push	r3
 29c:	4f 92       	push	r4
 29e:	5f 92       	push	r5
 2a0:	6f 92       	push	r6
 2a2:	7f 92       	push	r7
 2a4:	8f 92       	push	r8
 2a6:	9f 92       	push	r9
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	ca 1b       	sub	r28, r26
 2c2:	db 0b       	sbc	r29, r27
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	09 94       	ijmp

000002d0 <__epilogue_restores__>:
 2d0:	2a 88       	ldd	r2, Y+18	; 0x12
 2d2:	39 88       	ldd	r3, Y+17	; 0x11
 2d4:	48 88       	ldd	r4, Y+16	; 0x10
 2d6:	5f 84       	ldd	r5, Y+15	; 0x0f
 2d8:	6e 84       	ldd	r6, Y+14	; 0x0e
 2da:	7d 84       	ldd	r7, Y+13	; 0x0d
 2dc:	8c 84       	ldd	r8, Y+12	; 0x0c
 2de:	9b 84       	ldd	r9, Y+11	; 0x0b
 2e0:	aa 84       	ldd	r10, Y+10	; 0x0a
 2e2:	b9 84       	ldd	r11, Y+9	; 0x09
 2e4:	c8 84       	ldd	r12, Y+8	; 0x08
 2e6:	df 80       	ldd	r13, Y+7	; 0x07
 2e8:	ee 80       	ldd	r14, Y+6	; 0x06
 2ea:	fd 80       	ldd	r15, Y+5	; 0x05
 2ec:	0c 81       	ldd	r16, Y+4	; 0x04
 2ee:	1b 81       	ldd	r17, Y+3	; 0x03
 2f0:	aa 81       	ldd	r26, Y+2	; 0x02
 2f2:	b9 81       	ldd	r27, Y+1	; 0x01
 2f4:	ce 0f       	add	r28, r30
 2f6:	d1 1d       	adc	r29, r1
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	ed 01       	movw	r28, r26
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
