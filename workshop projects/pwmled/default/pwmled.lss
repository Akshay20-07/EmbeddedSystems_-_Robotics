
pwmled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000020e  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000111  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001e7  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b7  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  8a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <pwm_init>:
#include<avr/io.h>
#define F_CPU 1000000UL
#include<util/delay.h>

void pwm_init()
{
  92:	83 b7       	in	r24, 0x33	; 51
  94:	8a 66       	ori	r24, 0x6A	; 106
  96:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
 DDRB=(1<<PB3);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	87 bb       	out	0x17, r24	; 23
 }
  9c:	08 95       	ret

0000009e <main>:

 void main()
 {
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	8a 66       	ori	r24, 0x6A	; 106
  a2:	83 bf       	out	0x33, r24	; 51
#include<util/delay.h>

void pwm_init()
{
TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
 DDRB=(1<<PB3);
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	87 bb       	out	0x17, r24	; 23
 void main()
 {
  pwm_init();
  while(1)
  {
  OCR0=100;
  a8:	74 e6       	ldi	r23, 0x64	; 100
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	29 e1       	ldi	r18, 0x19	; 25
  ac:	30 e0       	ldi	r19, 0x00	; 0
  _delay_ms(3000);
  OCR0=10;
  ae:	6a e0       	ldi	r22, 0x0A	; 10
   _delay_ms(3000);
  OCR0=150;
  b0:	56 e9       	ldi	r21, 0x96	; 150
   _delay_ms(3000);
  OCR0=250;
  b2:	4a ef       	ldi	r20, 0xFA	; 250
 void main()
 {
  pwm_init();
  while(1)
  {
  OCR0=100;
  b4:	7c bf       	out	0x3c, r23	; 60
  b6:	80 e3       	ldi	r24, 0x30	; 48
  b8:	95 e7       	ldi	r25, 0x75	; 117
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x1c>
  _delay_ms(3000);
  OCR0=10;
  c4:	6c bf       	out	0x3c, r22	; 60
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	95 e7       	ldi	r25, 0x75	; 117
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x2c>
   _delay_ms(3000);
  OCR0=150;
  d4:	5c bf       	out	0x3c, r21	; 60
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	95 e7       	ldi	r25, 0x75	; 117
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x3c>
   _delay_ms(3000);
  OCR0=250;
  e4:	4c bf       	out	0x3c, r20	; 60
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	95 e7       	ldi	r25, 0x75	; 117
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <main+0x4c>
  f4:	df cf       	rjmp	.-66     	; 0xb4 <main+0x16>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
