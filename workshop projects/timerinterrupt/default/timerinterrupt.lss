
timerinterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00000296  0000030a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007c  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000342  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014c  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000102  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8a:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <Lcd_cmd>:
#define RW PC1
#define EN PC2

unsigned int count=0;
void Lcd_cmd(unsigned char C)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21
Lcd=(C & 0xF0);
Lcd &=~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Lcd_cmd+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21

Lcd=((C<<4)&0xF0);
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <Lcd_cmd+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
Lcd &=~(1<<RS);
  b8:	a8 98       	cbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  ba:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_cmd+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  c4:	aa 98       	cbi	0x15, 2	; 21
}
  c6:	08 95       	ret

000000c8 <Lcd_data>:

void Lcd_data(unsigned char D)
{
  c8:	28 2f       	mov	r18, r24
  ca:	20 7f       	andi	r18, 0xF0	; 240
  cc:	25 bb       	out	0x15, r18	; 21
Lcd=(D & 0xF0);
Lcd |=(1<<RS);
  ce:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  d0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	24 ec       	ldi	r18, 0xC4	; 196
  d6:	39 e0       	ldi	r19, 0x09	; 9
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_data+0x12>
_delay_ms(10);
Lcd &=~(1<<EN);
  de:	aa 98       	cbi	0x15, 2	; 21

Lcd=((D<<4)&0xF0);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	54 e0       	ldi	r21, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	5a 95       	dec	r21
  ea:	e1 f7       	brne	.-8      	; 0xe4 <Lcd_data+0x1c>
  ec:	85 bb       	out	0x15, r24	; 21
Lcd |=(1<<RS);
  ee:	a8 9a       	sbi	0x15, 0	; 21
Lcd &=~(1<<RW);
  f0:	a9 98       	cbi	0x15, 1	; 21
Lcd |=(1<<EN);
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_data+0x2e>
_delay_ms(10);
Lcd &=~(1<<EN);
  fa:	aa 98       	cbi	0x15, 2	; 21
}
  fc:	08 95       	ret

000000fe <Lcd_num>:

void Lcd_num(int i)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
int d;
Lcd_cmd(0x04);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
 10a:	0e c0       	rjmp	.+28     	; 0x128 <Lcd_num+0x2a>
while(i!=0)
{ 
d=i%10;
Lcd_data(d+48);
 10c:	ce 01       	movw	r24, r28
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 1a 01 	call	0x234	; 0x234 <__divmodhi4>
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
i/=10;
 11c:	ce 01       	movw	r24, r28
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 1a 01 	call	0x234	; 0x234 <__divmodhi4>
 126:	eb 01       	movw	r28, r22

void Lcd_num(int i)
{
int d;
Lcd_cmd(0x04);
while(i!=0)
 128:	20 97       	sbiw	r28, 0x00	; 0
 12a:	81 f7       	brne	.-32     	; 0x10c <Lcd_num+0xe>
{ 
d=i%10;
Lcd_data(d+48);
i/=10;
}
Lcd_cmd(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_init>:

void Lcd_init()
{
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x02);
Lcd_cmd(0x28);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x06);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x0C);
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
}
 150:	08 95       	ret

00000152 <Lcd_str>:

void Lcd_str (unsigned char *str)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	03 c0       	rjmp	.+6      	; 0x160 <Lcd_str+0xe>
while(*str)
Lcd_data(*str++);
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	0e 94 64 00 	call	0xc8	; 0xc8 <Lcd_data>
Lcd_cmd(0x0C);
}

void Lcd_str (unsigned char *str)
{
while(*str)
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	d1 f7       	brne	.-12     	; 0x15a <Lcd_str+0x8>
Lcd_data(*str++);
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
count++;
 18e:	80 91 70 00 	lds	r24, 0x0070
 192:	90 91 71 00 	lds	r25, 0x0071
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 71 00 	sts	0x0071, r25
 19c:	80 93 70 00 	sts	0x0070, r24
if(count==15)
 1a0:	0f 97       	sbiw	r24, 0x0f	; 15
 1a2:	b1 f4       	brne	.+44     	; 0x1d0 <__vector_9+0x64>
{
Lcd_cmd(0x80);
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_str("INterrupt");
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
PORTB=0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	97 e2       	ldi	r25, 0x27	; 39
 1ba:	29 e1       	ldi	r18, 0x19	; 25
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <__vector_9+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c6:	d9 f7       	brne	.-10     	; 0x1be <__vector_9+0x52>
_delay_ms(1000);
count=0;
 1c8:	10 92 71 00 	sts	0x0071, r1
 1cc:	10 92 70 00 	sts	0x0070, r1
}
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <print>:

void print()
{
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_cmd>
Lcd_cmd(0x80);
Lcd_str("main");
 1f8:	8a e6       	ldi	r24, 0x6A	; 106
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 a9 00 	call	0x152	; 0x152 <Lcd_str>
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	9c e9       	ldi	r25, 0x9C	; 156
 204:	29 e1       	ldi	r18, 0x19	; 25
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <print+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 210:	d9 f7       	brne	.-10     	; 0x208 <print+0x16>
_delay_ms(4000);
}
 212:	08 95       	ret

00000214 <main>:


int main()
{
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	87 bb       	out	0x17, r24	; 23
DDRB=0xFF;
DDRC=0xFF;
 218:	84 bb       	out	0x14, r24	; 20
TIMSK|=(1<<TOIE0);
 21a:	89 b7       	in	r24, 0x39	; 57
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	89 bf       	out	0x39, r24	; 57
TCCR0|=(1<<CS00)|(1<<CS02);
 220:	83 b7       	in	r24, 0x33	; 51
 222:	85 60       	ori	r24, 0x05	; 5
 224:	83 bf       	out	0x33, r24	; 51
Lcd_init();
 226:	0e 94 9c 00 	call	0x138	; 0x138 <Lcd_init>
sei();
 22a:	78 94       	sei
while(1)
{
PORTB=0x00;
 22c:	18 ba       	out	0x18, r1	; 24
print();
 22e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <print>
 232:	fc cf       	rjmp	.-8      	; 0x22c <main+0x18>

00000234 <__divmodhi4>:
 234:	97 fb       	bst	r25, 7
 236:	09 2e       	mov	r0, r25
 238:	07 26       	eor	r0, r23
 23a:	0a d0       	rcall	.+20     	; 0x250 <__divmodhi4_neg1>
 23c:	77 fd       	sbrc	r23, 7
 23e:	04 d0       	rcall	.+8      	; 0x248 <__divmodhi4_neg2>
 240:	0c d0       	rcall	.+24     	; 0x25a <__udivmodhi4>
 242:	06 d0       	rcall	.+12     	; 0x250 <__divmodhi4_neg1>
 244:	00 20       	and	r0, r0
 246:	1a f4       	brpl	.+6      	; 0x24e <__divmodhi4_exit>

00000248 <__divmodhi4_neg2>:
 248:	70 95       	com	r23
 24a:	61 95       	neg	r22
 24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000024e <__divmodhi4_exit>:
 24e:	08 95       	ret

00000250 <__divmodhi4_neg1>:
 250:	f6 f7       	brtc	.-4      	; 0x24e <__divmodhi4_exit>
 252:	90 95       	com	r25
 254:	81 95       	neg	r24
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	08 95       	ret

0000025a <__udivmodhi4>:
 25a:	aa 1b       	sub	r26, r26
 25c:	bb 1b       	sub	r27, r27
 25e:	51 e1       	ldi	r21, 0x11	; 17
 260:	07 c0       	rjmp	.+14     	; 0x270 <__udivmodhi4_ep>

00000262 <__udivmodhi4_loop>:
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	a6 17       	cp	r26, r22
 268:	b7 07       	cpc	r27, r23
 26a:	10 f0       	brcs	.+4      	; 0x270 <__udivmodhi4_ep>
 26c:	a6 1b       	sub	r26, r22
 26e:	b7 0b       	sbc	r27, r23

00000270 <__udivmodhi4_ep>:
 270:	88 1f       	adc	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	5a 95       	dec	r21
 276:	a9 f7       	brne	.-22     	; 0x262 <__udivmodhi4_loop>
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
